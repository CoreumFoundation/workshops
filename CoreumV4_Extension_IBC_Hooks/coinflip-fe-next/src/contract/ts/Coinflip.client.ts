/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, JobsResponse, JobResponse } from "./Coinflip.types";
export interface CoinflipReadOnlyInterface {
  contractAddress: string;
  getAllJobs: () => Promise<JobsResponse>;
  getJobById: ({
    id
  }: {
    id: string;
  }) => Promise<JobResponse>;
}
export class CoinflipQueryClient implements CoinflipReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAllJobs = this.getAllJobs.bind(this);
    this.getJobById = this.getJobById.bind(this);
  }
  getAllJobs = async (): Promise<JobsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_jobs: {}
    });
  };
  getJobById = async ({
    id
  }: {
    id: string;
  }): Promise<JobResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_job_by_id: {
        id
      }
    });
  };
}
export interface CoinflipInterface extends CoinflipReadOnlyInterface {
  contractAddress: string;
  sender: string;
  requestRandom: ({
    jobId
  }: {
    jobId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receiveRandom: ({
    jobId,
    randomness,
    signature
  }: {
    jobId: string;
    randomness: string;
    signature: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CoinflipClient extends CoinflipQueryClient implements CoinflipInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.requestRandom = this.requestRandom.bind(this);
    this.receiveRandom = this.receiveRandom.bind(this);
  }
  requestRandom = async ({
    jobId
  }: {
    jobId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_random: {
        job_id: jobId
      }
    }, fee, memo, _funds);
  };
  receiveRandom = async ({
    jobId,
    randomness,
    signature
  }: {
    jobId: string;
    randomness: string;
    signature: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_random: {
        job_id: jobId,
        randomness,
        signature
      }
    }, fee, memo, _funds);
  };
}