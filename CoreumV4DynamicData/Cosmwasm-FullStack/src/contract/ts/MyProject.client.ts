/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, ExecuteMsg, QueryMsg, BalanceResponse, ClassResponse, Class, ClassesResponse, PageResponse, NFTResponse, NFT, NFTsResponse, OwnerResponse, Uint128, ParamsResponse, Params, Coin, SupplyResponse } from "./MyProject.types";
export interface MyProjectReadOnlyInterface {
  contractAddress: string;
  params: () => Promise<ParamsResponse>;
  class: () => Promise<ClassResponse>;
  classes: ({
    issuer
  }: {
    issuer: string;
  }) => Promise<ClassesResponse>;
  balance: ({
    owner
  }: {
    owner: string;
  }) => Promise<BalanceResponse>;
  owner: ({
    id
  }: {
    id: string;
  }) => Promise<OwnerResponse>;
  supply: () => Promise<SupplyResponse>;
  nft: ({
    id
  }: {
    id: string;
  }) => Promise<NFTResponse>;
  nfts: ({
    owner
  }: {
    owner?: string;
  }) => Promise<NFTsResponse>;
  classNft: () => Promise<ClassResponse>;
  classesNft: () => Promise<ClassesResponse>;
}
export class MyProjectQueryClient implements MyProjectReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.params = this.params.bind(this);
    this.class = this.class.bind(this);
    this.classes = this.classes.bind(this);
    this.balance = this.balance.bind(this);
    this.owner = this.owner.bind(this);
    this.supply = this.supply.bind(this);
    this.nft = this.nft.bind(this);
    this.nfts = this.nfts.bind(this);
    this.classNft = this.classNft.bind(this);
    this.classesNft = this.classesNft.bind(this);
  }
  params = async (): Promise<ParamsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      params: {}
    });
  };
  class = async (): Promise<ClassResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      class: {}
    });
  };
  classes = async ({
    issuer
  }: {
    issuer: string;
  }): Promise<ClassesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      classes: {
        issuer
      }
    });
  };
  balance = async ({
    owner
  }: {
    owner: string;
  }): Promise<BalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {
        owner
      }
    });
  };
  owner = async ({
    id
  }: {
    id: string;
  }): Promise<OwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner: {
        id
      }
    });
  };
  supply = async (): Promise<SupplyResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      supply: {}
    });
  };
  nft = async ({
    id
  }: {
    id: string;
  }): Promise<NFTResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft: {
        id
      }
    });
  };
  nfts = async ({
    owner
  }: {
    owner?: string;
  }): Promise<NFTsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nfts: {
        owner
      }
    });
  };
  classNft = async (): Promise<ClassResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      class_nft: {}
    });
  };
  classesNft = async (): Promise<ClassesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      classes_nft: {}
    });
  };
}
export interface MyProjectInterface extends MyProjectReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mintMutable: ({
    data,
    id,
    recipient,
    uri,
    uriHash
  }: {
    data?: Binary;
    id: string;
    recipient?: string;
    uri?: string;
    uriHash?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintImmutable: ({
    data,
    id,
    recipient,
    uri,
    uriHash
  }: {
    data?: Binary;
    id: string;
    recipient?: string;
    uri?: string;
    uriHash?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  modifyData: ({
    data,
    id
  }: {
    data: Binary;
    id: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MyProjectClient extends MyProjectQueryClient implements MyProjectInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintMutable = this.mintMutable.bind(this);
    this.mintImmutable = this.mintImmutable.bind(this);
    this.modifyData = this.modifyData.bind(this);
  }
  mintMutable = async ({
    data,
    id,
    recipient,
    uri,
    uriHash
  }: {
    data?: Binary;
    id: string;
    recipient?: string;
    uri?: string;
    uriHash?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_mutable: {
        data,
        id,
        recipient,
        uri,
        uri_hash: uriHash
      }
    }, fee, memo, _funds);
  };
  mintImmutable = async ({
    data,
    id,
    recipient,
    uri,
    uriHash
  }: {
    data?: Binary;
    id: string;
    recipient?: string;
    uri?: string;
    uriHash?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_immutable: {
        data,
        id,
        recipient,
        uri,
        uri_hash: uriHash
      }
    }, fee, memo, _funds);
  };
  modifyData = async ({
    data,
    id
  }: {
    data: Binary;
    id: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      modify_data: {
        data,
        id
      }
    }, fee, memo, _funds);
  };
}