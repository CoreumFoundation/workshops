/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  core_denom: string;
  max_tickets_per_user: Uint128;
  ticket_price: Uint128;
  ticket_token_symbol: string;
  total_tickets: Uint128;
  validator_address: string;
}
export type ExecuteMsg = {
  buy_ticket: {
    number_of_tickets: Uint128;
  };
} | {
  select_winner_and_undelegate: {
    winner_address: string;
  };
} | {
  send_funds: {
    amount: Uint128;
    recipient: string;
  };
} | {
  burn_tickets: {
    number_of_tickets: Uint128;
  };
} | {
  add_bonus_reward_to_the_pool: {
    amount: Uint128;
  };
} | {
  update_draw_state: {
    new_state: DrawState;
  };
} | {
  set_undelegation_timestamp: {
    timestamp: number;
  };
} | {
  send_funds_to_winner: {};
};
export type DrawState = "TicketSalesOpen" | "TicketsSoldOutAccumulationInProgress" | "WinnerSelectedUndelegationInProcess" | "UndelegationCompletedTokensCanBeBurned" | "DrawFinished";
export type QueryMsg = {
  balance: {
    account: string;
  };
} | {
  get_participants: {};
} | {
  get_winner: {};
} | {
  get_current_state: {};
} | {
  get_number_of_tickets_sold: {};
} | {
  get_bonus_rewards: {};
} | {
  get_accumulated_rewards: {};
} | {
  get_draft_tvl: {};
} | {
  get_ticket_holders: {};
} | {
  get_user_number_of_tickets: {
    address: string;
  };
} | {
  get_user_win_chance: {
    address: string;
  };
} | {
  get_total_tickets_burned: {};
} | {
  get_claims: {
    address?: string | null;
  };
} | {
  get_delegated_amount: {};
} | {
  get_accumulated_rewards_at_undelegation: {};
};
export interface BalanceResponse {
  balance: Uint128;
}
export interface AccumulatedRewardsResponse {
  accumulated_rewards: Uint128;
}
export interface AccumulatedRewardsAtUndelegationResponse {
  accumulated_rewards: Uint128;
}
export interface BonusRewardsResponse {
  bonus_rewards: Uint128;
}
export interface ClaimsResponse {
  claims: ClaimInfo[];
  total_claimed: Uint128;
}
export interface ClaimInfo {
  address: string;
  amount: Uint128;
}
export interface CurrentStateResponse {
  state: DrawState;
  undelegation_done_timestamp?: number | null;
}
export interface DelegatedAmountResponse {
  amount: Coin;
}
export interface Coin {
  amount: string;
  denom: string;
}
export interface DraftTvlResponse {
  denom: string;
  tvl: Uint128;
}
export interface TicketsSoldResponse {
  tickets_remaining: Uint128;
  tickets_sold: Uint128;
  total_tickets: Uint128;
}
export interface ParticipantsResponse {
  participants: ParticipantInfo[];
  total_participants: number;
}
export interface ParticipantInfo {
  address: string;
  tickets: Uint128;
  win_chance: string;
}
export interface TicketHoldersResponse {
  holders: ParticipantInfo[];
  total_holders: number;
}
export interface TotalBurnedResponse {
  total_burned: Uint128;
}
export interface UserTicketsResponse {
  address: string;
  tickets: Uint128;
}
export interface UserWinChanceResponse {
  address: string;
  tickets: Uint128;
  win_chance: string;
}
export interface WinnerResponse {
  rewards: Uint128;
  winner?: string | null;
}