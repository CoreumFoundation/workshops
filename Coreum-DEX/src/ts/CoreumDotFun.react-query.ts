//@ts-nocheck
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, ExecuteMsg, DrawState, QueryMsg, BalanceResponse, AccumulatedRewardsResponse, AccumulatedRewardsAtUndelegationResponse, BonusRewardsResponse, ClaimsResponse, ClaimInfo, CurrentStateResponse, DelegatedAmountResponse, Coin, DraftTvlResponse, TicketsSoldResponse, ParticipantsResponse, ParticipantInfo, TicketHoldersResponse, TotalBurnedResponse, UserTicketsResponse, UserWinChanceResponse, WinnerResponse } from "./CoreumDotFun.types";
import { CoreumDotFunQueryClient, CoreumDotFunClient } from "./CoreumDotFun.client";
export const coreumDotFunQueryKeys = {
  contract: ([{
    contract: "coreumDotFun"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...coreumDotFunQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "balance",
    args
  }] as const),
  getParticipants: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_participants",
    args
  }] as const),
  getWinner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_winner",
    args
  }] as const),
  getCurrentState: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_current_state",
    args
  }] as const),
  getNumberOfTicketsSold: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_number_of_tickets_sold",
    args
  }] as const),
  getBonusRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_bonus_rewards",
    args
  }] as const),
  getAccumulatedRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_accumulated_rewards",
    args
  }] as const),
  getDraftTvl: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_draft_tvl",
    args
  }] as const),
  getTicketHolders: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_ticket_holders",
    args
  }] as const),
  getUserNumberOfTickets: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_user_number_of_tickets",
    args
  }] as const),
  getUserWinChance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_user_win_chance",
    args
  }] as const),
  getTotalTicketsBurned: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_total_tickets_burned",
    args
  }] as const),
  getClaims: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_claims",
    args
  }] as const),
  getDelegatedAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_delegated_amount",
    args
  }] as const),
  getAccumulatedRewardsAtUndelegation: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...coreumDotFunQueryKeys.address(contractAddress)[0],
    method: "get_accumulated_rewards_at_undelegation",
    args
  }] as const)
};
export const coreumDotFunQueries = {
  balance: <TData = BalanceResponse,>({
    client,
    args,
    options
  }: CoreumDotFunBalanceQuery<TData>): UseQueryOptions<BalanceResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.balance(client?.contractAddress, args),
    queryFn: () => client ? client.balance({
      account: args.account
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getParticipants: <TData = ParticipantsResponse,>({
    client,
    options
  }: CoreumDotFunGetParticipantsQuery<TData>): UseQueryOptions<ParticipantsResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getParticipants(client?.contractAddress),
    queryFn: () => client ? client.getParticipants() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getWinner: <TData = WinnerResponse,>({
    client,
    options
  }: CoreumDotFunGetWinnerQuery<TData>): UseQueryOptions<WinnerResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getWinner(client?.contractAddress),
    queryFn: () => client ? client.getWinner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getCurrentState: <TData = CurrentStateResponse,>({
    client,
    options
  }: CoreumDotFunGetCurrentStateQuery<TData>): UseQueryOptions<CurrentStateResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getCurrentState(client?.contractAddress),
    queryFn: () => client ? client.getCurrentState() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getNumberOfTicketsSold: <TData = TicketsSoldResponse,>({
    client,
    options
  }: CoreumDotFunGetNumberOfTicketsSoldQuery<TData>): UseQueryOptions<TicketsSoldResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getNumberOfTicketsSold(client?.contractAddress),
    queryFn: () => client ? client.getNumberOfTicketsSold() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBonusRewards: <TData = BonusRewardsResponse,>({
    client,
    options
  }: CoreumDotFunGetBonusRewardsQuery<TData>): UseQueryOptions<BonusRewardsResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getBonusRewards(client?.contractAddress),
    queryFn: () => client ? client.getBonusRewards() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getAccumulatedRewards: <TData = AccumulatedRewardsResponse,>({
    client,
    options
  }: CoreumDotFunGetAccumulatedRewardsQuery<TData>): UseQueryOptions<AccumulatedRewardsResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getAccumulatedRewards(client?.contractAddress),
    queryFn: () => client ? client.getAccumulatedRewards() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getDraftTvl: <TData = DraftTvlResponse,>({
    client,
    options
  }: CoreumDotFunGetDraftTvlQuery<TData>): UseQueryOptions<DraftTvlResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getDraftTvl(client?.contractAddress),
    queryFn: () => client ? client.getDraftTvl() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getTicketHolders: <TData = TicketHoldersResponse,>({
    client,
    options
  }: CoreumDotFunGetTicketHoldersQuery<TData>): UseQueryOptions<TicketHoldersResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getTicketHolders(client?.contractAddress),
    queryFn: () => client ? client.getTicketHolders() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getUserNumberOfTickets: <TData = UserTicketsResponse,>({
    client,
    args,
    options
  }: CoreumDotFunGetUserNumberOfTicketsQuery<TData>): UseQueryOptions<UserTicketsResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getUserNumberOfTickets(client?.contractAddress, args),
    queryFn: () => client ? client.getUserNumberOfTickets({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getUserWinChance: <TData = UserWinChanceResponse,>({
    client,
    args,
    options
  }: CoreumDotFunGetUserWinChanceQuery<TData>): UseQueryOptions<UserWinChanceResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getUserWinChance(client?.contractAddress, args),
    queryFn: () => client ? client.getUserWinChance({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getTotalTicketsBurned: <TData = TotalBurnedResponse,>({
    client,
    options
  }: CoreumDotFunGetTotalTicketsBurnedQuery<TData>): UseQueryOptions<TotalBurnedResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getTotalTicketsBurned(client?.contractAddress),
    queryFn: () => client ? client.getTotalTicketsBurned() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getClaims: <TData = ClaimsResponse,>({
    client,
    args,
    options
  }: CoreumDotFunGetClaimsQuery<TData>): UseQueryOptions<ClaimsResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getClaims(client?.contractAddress, args),
    queryFn: () => client ? client.getClaims({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getDelegatedAmount: <TData = DelegatedAmountResponse,>({
    client,
    options
  }: CoreumDotFunGetDelegatedAmountQuery<TData>): UseQueryOptions<DelegatedAmountResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getDelegatedAmount(client?.contractAddress),
    queryFn: () => client ? client.getDelegatedAmount() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getAccumulatedRewardsAtUndelegation: <TData = AccumulatedRewardsAtUndelegationResponse,>({
    client,
    options
  }: CoreumDotFunGetAccumulatedRewardsAtUndelegationQuery<TData>): UseQueryOptions<AccumulatedRewardsAtUndelegationResponse, Error, TData> => ({
    queryKey: coreumDotFunQueryKeys.getAccumulatedRewardsAtUndelegation(client?.contractAddress),
    queryFn: () => client ? client.getAccumulatedRewardsAtUndelegation() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CoreumDotFunReactQuery<TResponse, TData = TResponse> {
  client: CoreumDotFunQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CoreumDotFunGetAccumulatedRewardsAtUndelegationQuery<TData> extends CoreumDotFunReactQuery<AccumulatedRewardsAtUndelegationResponse, TData> {}
export function useCoreumDotFunGetAccumulatedRewardsAtUndelegationQuery<TData = AccumulatedRewardsAtUndelegationResponse>({
  client,
  options
}: CoreumDotFunGetAccumulatedRewardsAtUndelegationQuery<TData>) {
  return useQuery<AccumulatedRewardsAtUndelegationResponse, Error, TData>(coreumDotFunQueryKeys.getAccumulatedRewardsAtUndelegation(client?.contractAddress), () => client ? client.getAccumulatedRewardsAtUndelegation() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetDelegatedAmountQuery<TData> extends CoreumDotFunReactQuery<DelegatedAmountResponse, TData> {}
export function useCoreumDotFunGetDelegatedAmountQuery<TData = DelegatedAmountResponse>({
  client,
  options
}: CoreumDotFunGetDelegatedAmountQuery<TData>) {
  return useQuery<DelegatedAmountResponse, Error, TData>(coreumDotFunQueryKeys.getDelegatedAmount(client?.contractAddress), () => client ? client.getDelegatedAmount() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetClaimsQuery<TData> extends CoreumDotFunReactQuery<ClaimsResponse, TData> {
  args: {
    address?: string;
  };
}
export function useCoreumDotFunGetClaimsQuery<TData = ClaimsResponse>({
  client,
  args,
  options
}: CoreumDotFunGetClaimsQuery<TData>) {
  return useQuery<ClaimsResponse, Error, TData>(coreumDotFunQueryKeys.getClaims(client?.contractAddress, args), () => client ? client.getClaims({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetTotalTicketsBurnedQuery<TData> extends CoreumDotFunReactQuery<TotalBurnedResponse, TData> {}
export function useCoreumDotFunGetTotalTicketsBurnedQuery<TData = TotalBurnedResponse>({
  client,
  options
}: CoreumDotFunGetTotalTicketsBurnedQuery<TData>) {
  return useQuery<TotalBurnedResponse, Error, TData>(coreumDotFunQueryKeys.getTotalTicketsBurned(client?.contractAddress), () => client ? client.getTotalTicketsBurned() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetUserWinChanceQuery<TData> extends CoreumDotFunReactQuery<UserWinChanceResponse, TData> {
  args: {
    address: string;
  };
}
export function useCoreumDotFunGetUserWinChanceQuery<TData = UserWinChanceResponse>({
  client,
  args,
  options
}: CoreumDotFunGetUserWinChanceQuery<TData>) {
  return useQuery<UserWinChanceResponse, Error, TData>(coreumDotFunQueryKeys.getUserWinChance(client?.contractAddress, args), () => client ? client.getUserWinChance({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetUserNumberOfTicketsQuery<TData> extends CoreumDotFunReactQuery<UserTicketsResponse, TData> {
  args: {
    address: string;
  };
}
export function useCoreumDotFunGetUserNumberOfTicketsQuery<TData = UserTicketsResponse>({
  client,
  args,
  options
}: CoreumDotFunGetUserNumberOfTicketsQuery<TData>) {
  return useQuery<UserTicketsResponse, Error, TData>(coreumDotFunQueryKeys.getUserNumberOfTickets(client?.contractAddress, args), () => client ? client.getUserNumberOfTickets({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetTicketHoldersQuery<TData> extends CoreumDotFunReactQuery<TicketHoldersResponse, TData> {}
export function useCoreumDotFunGetTicketHoldersQuery<TData = TicketHoldersResponse>({
  client,
  options
}: CoreumDotFunGetTicketHoldersQuery<TData>) {
  return useQuery<TicketHoldersResponse, Error, TData>(coreumDotFunQueryKeys.getTicketHolders(client?.contractAddress), () => client ? client.getTicketHolders() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetDraftTvlQuery<TData> extends CoreumDotFunReactQuery<DraftTvlResponse, TData> {}
export function useCoreumDotFunGetDraftTvlQuery<TData = DraftTvlResponse>({
  client,
  options
}: CoreumDotFunGetDraftTvlQuery<TData>) {
  return useQuery<DraftTvlResponse, Error, TData>(coreumDotFunQueryKeys.getDraftTvl(client?.contractAddress), () => client ? client.getDraftTvl() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetAccumulatedRewardsQuery<TData> extends CoreumDotFunReactQuery<AccumulatedRewardsResponse, TData> {}
export function useCoreumDotFunGetAccumulatedRewardsQuery<TData = AccumulatedRewardsResponse>({
  client,
  options
}: CoreumDotFunGetAccumulatedRewardsQuery<TData>) {
  return useQuery<AccumulatedRewardsResponse, Error, TData>(coreumDotFunQueryKeys.getAccumulatedRewards(client?.contractAddress), () => client ? client.getAccumulatedRewards() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetBonusRewardsQuery<TData> extends CoreumDotFunReactQuery<BonusRewardsResponse, TData> {}
export function useCoreumDotFunGetBonusRewardsQuery<TData = BonusRewardsResponse>({
  client,
  options
}: CoreumDotFunGetBonusRewardsQuery<TData>) {
  return useQuery<BonusRewardsResponse, Error, TData>(coreumDotFunQueryKeys.getBonusRewards(client?.contractAddress), () => client ? client.getBonusRewards() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetNumberOfTicketsSoldQuery<TData> extends CoreumDotFunReactQuery<TicketsSoldResponse, TData> {}
export function useCoreumDotFunGetNumberOfTicketsSoldQuery<TData = TicketsSoldResponse>({
  client,
  options
}: CoreumDotFunGetNumberOfTicketsSoldQuery<TData>) {
  return useQuery<TicketsSoldResponse, Error, TData>(coreumDotFunQueryKeys.getNumberOfTicketsSold(client?.contractAddress), () => client ? client.getNumberOfTicketsSold() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetCurrentStateQuery<TData> extends CoreumDotFunReactQuery<CurrentStateResponse, TData> {}
export function useCoreumDotFunGetCurrentStateQuery<TData = CurrentStateResponse>({
  client,
  options
}: CoreumDotFunGetCurrentStateQuery<TData>) {
  return useQuery<CurrentStateResponse, Error, TData>(coreumDotFunQueryKeys.getCurrentState(client?.contractAddress), () => client ? client.getCurrentState() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetWinnerQuery<TData> extends CoreumDotFunReactQuery<WinnerResponse, TData> {}
export function useCoreumDotFunGetWinnerQuery<TData = WinnerResponse>({
  client,
  options
}: CoreumDotFunGetWinnerQuery<TData>) {
  return useQuery<WinnerResponse, Error, TData>(coreumDotFunQueryKeys.getWinner(client?.contractAddress), () => client ? client.getWinner() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunGetParticipantsQuery<TData> extends CoreumDotFunReactQuery<ParticipantsResponse, TData> {}
export function useCoreumDotFunGetParticipantsQuery<TData = ParticipantsResponse>({
  client,
  options
}: CoreumDotFunGetParticipantsQuery<TData>) {
  return useQuery<ParticipantsResponse, Error, TData>(coreumDotFunQueryKeys.getParticipants(client?.contractAddress), () => client ? client.getParticipants() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunBalanceQuery<TData> extends CoreumDotFunReactQuery<BalanceResponse, TData> {
  args: {
    account: string;
  };
}
export function useCoreumDotFunBalanceQuery<TData = BalanceResponse>({
  client,
  args,
  options
}: CoreumDotFunBalanceQuery<TData>) {
  return useQuery<BalanceResponse, Error, TData>(coreumDotFunQueryKeys.balance(client?.contractAddress, args), () => client ? client.balance({
    account: args.account
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CoreumDotFunSendFundsToWinnerMutation {
  client: CoreumDotFunClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunSendFundsToWinnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunSendFundsToWinnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunSendFundsToWinnerMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendFundsToWinner(fee, memo, funds), options);
}
export interface CoreumDotFunSetUndelegationTimestampMutation {
  client: CoreumDotFunClient;
  msg: {
    timestamp: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunSetUndelegationTimestampMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunSetUndelegationTimestampMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunSetUndelegationTimestampMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setUndelegationTimestamp(msg, fee, memo, funds), options);
}
export interface CoreumDotFunUpdateDrawStateMutation {
  client: CoreumDotFunClient;
  msg: {
    newState: DrawState;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunUpdateDrawStateMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunUpdateDrawStateMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunUpdateDrawStateMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateDrawState(msg, fee, memo, funds), options);
}
export interface CoreumDotFunAddBonusRewardToThePoolMutation {
  client: CoreumDotFunClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunAddBonusRewardToThePoolMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunAddBonusRewardToThePoolMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunAddBonusRewardToThePoolMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addBonusRewardToThePool(msg, fee, memo, funds), options);
}
export interface CoreumDotFunBurnTicketsMutation {
  client: CoreumDotFunClient;
  msg: {
    numberOfTickets: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunBurnTicketsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunBurnTicketsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunBurnTicketsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burnTickets(msg, fee, memo, funds), options);
}
export interface CoreumDotFunSendFundsMutation {
  client: CoreumDotFunClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunSendFundsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunSendFundsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunSendFundsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendFunds(msg, fee, memo, funds), options);
}
export interface CoreumDotFunSelectWinnerAndUndelegateMutation {
  client: CoreumDotFunClient;
  msg: {
    winnerAddress: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunSelectWinnerAndUndelegateMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunSelectWinnerAndUndelegateMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunSelectWinnerAndUndelegateMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.selectWinnerAndUndelegate(msg, fee, memo, funds), options);
}
export interface CoreumDotFunBuyTicketMutation {
  client: CoreumDotFunClient;
  msg: {
    numberOfTickets: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCoreumDotFunBuyTicketMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CoreumDotFunBuyTicketMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CoreumDotFunBuyTicketMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.buyTicket(msg, fee, memo, funds), options);
}
