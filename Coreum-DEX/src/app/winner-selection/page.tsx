"use client";

import { useDraft } from "@/hooks/useDraft";
import { useEffect, useState } from "react";
import { useAccount } from "graz";
import { CHAIN_ID } from "@/constants";

interface TokenHolder {
  address: string;
  tickets: string;
  win_chance: string;
  index: number;
}

export default function WinnerSelection() {
  const { ticketHolders } = useDraft();
  const { data: account } = useAccount({ chainId: CHAIN_ID });
  const [holders, setHolders] = useState<TokenHolder[]>([]);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    if (ticketHolders?.holders) {
      // Expand each holder by their number of tickets
      const expanded: TokenHolder[] = [];
      ticketHolders.holders.forEach((holder) => {
        const numTickets = Number(holder.tickets);
        for (let i = 0; i < numTickets; i++) {
          expanded.push({
            address: holder.address,
            tickets: "1",
            win_chance: holder.win_chance,
            index: expanded.length + 1,
          });
        }
      });
      setHolders(expanded);
    }
  }, [ticketHolders]);

  const filteredHolders = holders.filter((holder) =>
    holder.address.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const shuffleHolders = () => {
    setHolders((prev) => {
      const arr = [...prev];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      // Re-index after shuffle
      return arr.map((h, idx) => ({ ...h, index: idx + 1 }));
    });
  };

  return (
    <main className="min-h-screen col-span-2 py-8 px-2 sm:px-6 lg:px-8">
      <div className="w-full mx-auto">
        <div className="flex flex-col space-y-6 w-full">
          {/* Header */}
          <div className="text-center space-y-2">
            <h1 className="text-3xl font-bold text-white">Winner Selection</h1>
            <p className="text-gray-300">
              Total Participants: {ticketHolders?.total_holders || 0}
            </p>
          </div>

          <div className="flex justify-center items-center md:items-start">
            <iframe
              src="https://www.random.org/widgets/integers/iframe.php?title=True+Random+Number+Generator&buttontxt=Generate&width=200&height=260&border=on&bgcolor=%23171b5e&txtcolor=%2335F0D0&altbgcolor=%231e1a78&alttxtcolor=%23FFFFFF&defaultmin=1&defaultmax=500&fixed=on"
              frameBorder="0"
              width="200"
              height="260"
              scrolling="no"
              title="True Random Number Generator"
            >
              The numbers generated by this widget come from RANDOM.ORG's true
              random number generator.
            </iframe>
          </div>

          {/* Search Bar + Shuffle Button + Random.org Widget */}
          <div className="w-full flex flex-col md:flex-row items-stretch gap-4 md:gap-6 mb-4">
            <div className="flex-1 flex flex-col gap-3">
              <div className="relative w-full flex items-center gap-3">
                <div className="flex-1 relative">
                  <input
                    type="text"
                    placeholder="Search by address..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full px-4 py-3 bg-[#171b5e]/90 rounded-xl border border-indigo-500/20 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary/50"
                  />
                  <div className="absolute inset-0 bg-gradient-to-r from-secondary via-primary to-[#f6d447] rounded-xl blur-sm opacity-50 animate-background bg-[length:_400%_400%] [animation-duration:_6s] -z-10"></div>
                </div>
                <button
                  type="button"
                  onClick={shuffleHolders}
                  className="px-5 py-3 rounded-xl font-semibold bg-primary text-[#171b5e] hover:bg-secondary transition-colors border border-indigo-500/20 shadow"
                >
                  Shuffle
                </button>
              </div>
            </div>
          </div>

          {/* Token Holders List */}
          <div className="relative w-full">
            <div className="absolute inset-0 bg-gradient-to-r from-secondary via-primary to-[#f6d447] rounded-xl blur-sm opacity-50 animate-background bg-[length:_400%_400%] [animation-duration:_6s] -z-10"></div>
            <div className="bg-[#171b5e]/90 rounded-xl overflow-hidden backdrop-blur-sm w-full">
              <div className="overflow-x-auto w-full">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-indigo-500/20">
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-300 w-20">
                        #
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-300">
                        Address
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-300 w-32">
                        Tickets
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-300 w-32">
                        Win Chance
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-indigo-500/20">
                    {filteredHolders.map((holder) => (
                      <tr
                        key={holder.address + "-" + holder.index}
                        className={`hover:bg-indigo-800/30 transition-colors ${
                          holder.address === account?.bech32Address
                            ? "bg-primary/10"
                            : ""
                        }`}
                      >
                        <td className="px-6 py-4 text-sm text-gray-300 w-20">
                          {holder.index}
                        </td>
                        <td className="px-6 py-4 text-sm font-mono">
                          <span className="text-white">{holder.address}</span>
                        </td>
                        <td className="px-6 py-4 text-sm text-primary w-32">
                          {holder.tickets}
                        </td>
                        <td className="px-6 py-4 text-sm text-primary w-32">
                          {holder.win_chance}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
