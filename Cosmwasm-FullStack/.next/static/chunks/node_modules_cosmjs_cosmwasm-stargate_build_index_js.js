"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_cosmjs_cosmwasm-stargate_build_index_js"],{

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js":
/*!************************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"./node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"./node_modules/@cosmjs/math/build/index.js\");\nconst stargate_1 = __webpack_require__(/*! @cosmjs/stargate */ \"./node_modules/@cosmjs/stargate/build/index.js\");\nconst tendermint_rpc_1 = __webpack_require__(/*! @cosmjs/tendermint-rpc */ \"./node_modules/@cosmjs/tendermint-rpc/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"./node_modules/@cosmjs/utils/build/index.js\");\nconst abci_1 = __webpack_require__(/*! cosmjs-types/cosmos/base/abci/v1beta1/abci */ \"./node_modules/cosmjs-types/cosmos/base/abci/v1beta1/abci.js\");\nconst types_1 = __webpack_require__(/*! cosmjs-types/cosmwasm/wasm/v1/types */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js\");\nconst modules_1 = __webpack_require__(/*! ./modules */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/modules/index.js\");\nclass CosmWasmClient {\n    /**\n     * Creates an instance by connecting to the given CometBFT RPC endpoint.\n     *\n     * This uses auto-detection to decide between a CometBFT 0.38, Tendermint 0.37 and 0.34 client.\n     * To set the Comet client explicitly, use `create`.\n     */\n    static async connect(endpoint) {\n        const cometClient = await (0, tendermint_rpc_1.connectComet)(endpoint);\n        return CosmWasmClient.create(cometClient);\n    }\n    /**\n     * Creates an instance from a manually created Comet client.\n     * Use this to use `Comet38Client` or `Tendermint37Client` instead of `Tendermint34Client`.\n     */\n    static async create(cometClient) {\n        return new CosmWasmClient(cometClient);\n    }\n    constructor(cometClient) {\n        this.codesCache = new Map();\n        if (cometClient) {\n            this.cometClient = cometClient;\n            this.queryClient = stargate_1.QueryClient.withExtensions(cometClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, modules_1.setupWasmExtension, stargate_1.setupTxExtension);\n        }\n    }\n    getCometClient() {\n        return this.cometClient;\n    }\n    forceGetCometClient() {\n        if (!this.cometClient) {\n            throw new Error(\"Comet client not available. You cannot use online functionality in offline mode.\");\n        }\n        return this.cometClient;\n    }\n    getQueryClient() {\n        return this.queryClient;\n    }\n    forceGetQueryClient() {\n        if (!this.queryClient) {\n            throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n        }\n        return this.queryClient;\n    }\n    async getChainId() {\n        if (!this.chainId) {\n            const response = await this.forceGetCometClient().status();\n            const chainId = response.nodeInfo.network;\n            if (!chainId)\n                throw new Error(\"Chain ID must not be empty\");\n            this.chainId = chainId;\n        }\n        return this.chainId;\n    }\n    async getHeight() {\n        const status = await this.forceGetCometClient().status();\n        return status.syncInfo.latestBlockHeight;\n    }\n    async getAccount(searchAddress) {\n        try {\n            const account = await this.forceGetQueryClient().auth.account(searchAddress);\n            return account ? (0, stargate_1.accountFromAny)(account) : null;\n        }\n        catch (error) {\n            if (/rpc error: code = NotFound/i.test(error.toString())) {\n                return null;\n            }\n            throw error;\n        }\n    }\n    async getSequence(address) {\n        const account = await this.getAccount(address);\n        if (!account) {\n            throw new Error(`Account '${address}' does not exist on chain. Send some tokens there before trying to query sequence.`);\n        }\n        return {\n            accountNumber: account.accountNumber,\n            sequence: account.sequence,\n        };\n    }\n    async getBlock(height) {\n        const response = await this.forceGetCometClient().block(height);\n        return {\n            id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n            header: {\n                version: {\n                    block: new math_1.Uint53(response.block.header.version.block).toString(),\n                    app: new math_1.Uint53(response.block.header.version.app).toString(),\n                },\n                height: response.block.header.height,\n                chainId: response.block.header.chainId,\n                time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time),\n            },\n            txs: response.block.txs,\n        };\n    }\n    async getBalance(address, searchDenom) {\n        return this.forceGetQueryClient().bank.balance(address, searchDenom);\n    }\n    async getTx(id) {\n        const results = await this.txsQuery(`tx.hash='${id}'`);\n        return results[0] ?? null;\n    }\n    async searchTx(query) {\n        let rawQuery;\n        if (typeof query === \"string\") {\n            rawQuery = query;\n        }\n        else if ((0, stargate_1.isSearchTxQueryArray)(query)) {\n            rawQuery = query\n                .map((t) => {\n                // numeric values must not have quotes https://github.com/cosmos/cosmjs/issues/1462\n                if (typeof t.value === \"string\")\n                    return `${t.key}='${t.value}'`;\n                else\n                    return `${t.key}=${t.value}`;\n            })\n                .join(\" AND \");\n        }\n        else {\n            throw new Error(\"Got unsupported query type. See CosmJS 0.31 CHANGELOG for API breaking changes here.\");\n        }\n        return this.txsQuery(rawQuery);\n    }\n    disconnect() {\n        if (this.cometClient)\n            this.cometClient.disconnect();\n    }\n    /**\n     * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n     *\n     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n     * an error is thrown.\n     *\n     * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n     *\n     * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n     * usually needs to check for execution success or failure.\n     */\n    // NOTE: This method is tested against slow chains and timeouts in the @cosmjs/stargate package.\n    // Make sure it is kept in sync!\n    async broadcastTx(tx, timeoutMs = 60000, pollIntervalMs = 3000) {\n        let timedOut = false;\n        const txPollTimeout = setTimeout(() => {\n            timedOut = true;\n        }, timeoutMs);\n        const pollForTx = async (txId) => {\n            if (timedOut) {\n                throw new stargate_1.TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);\n            }\n            await (0, utils_1.sleep)(pollIntervalMs);\n            const result = await this.getTx(txId);\n            return result\n                ? {\n                    code: result.code,\n                    height: result.height,\n                    txIndex: result.txIndex,\n                    rawLog: result.rawLog,\n                    transactionHash: txId,\n                    events: result.events,\n                    msgResponses: result.msgResponses,\n                    gasUsed: result.gasUsed,\n                    gasWanted: result.gasWanted,\n                }\n                : pollForTx(txId);\n        };\n        const transactionId = await this.broadcastTxSync(tx);\n        return new Promise((resolve, reject) => pollForTx(transactionId).then((value) => {\n            clearTimeout(txPollTimeout);\n            resolve(value);\n        }, (error) => {\n            clearTimeout(txPollTimeout);\n            reject(error);\n        }));\n    }\n    /**\n     * Broadcasts a signed transaction to the network without monitoring it.\n     *\n     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n     * an error is thrown.\n     *\n     * If the transaction is broadcasted, a `string` containing the hash of the transaction is returned. The caller then\n     * usually needs to check if the transaction was included in a block and was successful.\n     *\n     * @returns Returns the hash of the transaction\n     */\n    async broadcastTxSync(tx) {\n        const broadcasted = await this.forceGetCometClient().broadcastTxSync({ tx });\n        if (broadcasted.code) {\n            return Promise.reject(new stargate_1.BroadcastTxError(broadcasted.code, broadcasted.codespace ?? \"\", broadcasted.log));\n        }\n        const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n        return transactionId;\n    }\n    /**\n     * getCodes() returns all codes and is just looping through all pagination pages.\n     *\n     * This is potentially inefficient and advanced apps should consider creating\n     * their own query client to handle pagination together with the app's screens.\n     */\n    async getCodes() {\n        const allCodes = [];\n        let startAtKey = undefined;\n        do {\n            const { codeInfos, pagination } = await this.forceGetQueryClient().wasm.listCodeInfo(startAtKey);\n            const loadedCodes = codeInfos || [];\n            allCodes.push(...loadedCodes);\n            startAtKey = pagination?.nextKey;\n        } while (startAtKey?.length !== 0);\n        return allCodes.map((entry) => {\n            (0, utils_1.assert)(entry.creator && entry.codeId && entry.dataHash, \"entry incomplete\");\n            return {\n                id: Number(entry.codeId),\n                creator: entry.creator,\n                checksum: (0, encoding_1.toHex)(entry.dataHash),\n            };\n        });\n    }\n    async getCodeDetails(codeId) {\n        const cached = this.codesCache.get(codeId);\n        if (cached)\n            return cached;\n        const { codeInfo, data } = await this.forceGetQueryClient().wasm.getCode(codeId);\n        (0, utils_1.assert)(codeInfo && codeInfo.codeId && codeInfo.creator && codeInfo.dataHash && data, \"codeInfo missing or incomplete\");\n        const codeDetails = {\n            id: Number(codeInfo.codeId),\n            creator: codeInfo.creator,\n            checksum: (0, encoding_1.toHex)(codeInfo.dataHash),\n            data: data,\n        };\n        this.codesCache.set(codeId, codeDetails);\n        return codeDetails;\n    }\n    /**\n     * getContracts() returns all contract instances for one code and is just looping through all pagination pages.\n     *\n     * This is potentially inefficient and advanced apps should consider creating\n     * their own query client to handle pagination together with the app's screens.\n     */\n    async getContracts(codeId) {\n        const allContracts = [];\n        let startAtKey = undefined;\n        do {\n            const { contracts, pagination } = await this.forceGetQueryClient().wasm.listContractsByCodeId(codeId, startAtKey);\n            allContracts.push(...contracts);\n            startAtKey = pagination?.nextKey;\n        } while (startAtKey?.length !== 0 && startAtKey !== undefined);\n        return allContracts;\n    }\n    /**\n     * Returns a list of contract addresses created by the given creator.\n     * This just loops through all pagination pages.\n     */\n    async getContractsByCreator(creator) {\n        const allContracts = [];\n        let startAtKey = undefined;\n        do {\n            const { contractAddresses, pagination } = await this.forceGetQueryClient().wasm.listContractsByCreator(creator, startAtKey);\n            allContracts.push(...contractAddresses);\n            startAtKey = pagination?.nextKey;\n        } while (startAtKey?.length !== 0 && startAtKey !== undefined);\n        return allContracts;\n    }\n    /**\n     * Throws an error if no contract was found at the address\n     */\n    async getContract(address) {\n        const { address: retrievedAddress, contractInfo } = await this.forceGetQueryClient().wasm.getContractInfo(address);\n        if (!contractInfo)\n            throw new Error(`No contract found at address \"${address}\"`);\n        (0, utils_1.assert)(retrievedAddress, \"address missing\");\n        (0, utils_1.assert)(contractInfo.codeId && contractInfo.creator && contractInfo.label, \"contractInfo incomplete\");\n        return {\n            address: retrievedAddress,\n            codeId: Number(contractInfo.codeId),\n            creator: contractInfo.creator,\n            admin: contractInfo.admin || undefined,\n            label: contractInfo.label,\n            ibcPortId: contractInfo.ibcPortId || undefined,\n        };\n    }\n    /**\n     * Throws an error if no contract was found at the address\n     */\n    async getContractCodeHistory(address) {\n        const result = await this.forceGetQueryClient().wasm.getContractCodeHistory(address);\n        if (!result)\n            throw new Error(`No contract history found for address \"${address}\"`);\n        const operations = {\n            [types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT]: \"Init\",\n            [types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS]: \"Genesis\",\n            [types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE]: \"Migrate\",\n        };\n        return (result.entries || []).map((entry) => {\n            (0, utils_1.assert)(entry.operation && entry.codeId && entry.msg);\n            return {\n                operation: operations[entry.operation],\n                codeId: Number(entry.codeId),\n                msg: JSON.parse((0, encoding_1.fromUtf8)(entry.msg)),\n            };\n        });\n    }\n    /**\n     * Returns the data at the key if present (raw contract dependent storage data)\n     * or null if no data at this key.\n     *\n     * Promise is rejected when contract does not exist.\n     */\n    async queryContractRaw(address, key) {\n        // just test contract existence\n        await this.getContract(address);\n        const { data } = await this.forceGetQueryClient().wasm.queryContractRaw(address, key);\n        return data ?? null;\n    }\n    /**\n     * Makes a smart query on the contract, returns the parsed JSON document.\n     *\n     * Promise is rejected when contract does not exist.\n     * Promise is rejected for invalid query format.\n     * Promise is rejected for invalid response format.\n     */\n    async queryContractSmart(address, queryMsg) {\n        try {\n            return await this.forceGetQueryClient().wasm.queryContractSmart(address, queryMsg);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (error.message.startsWith(\"not found: contract\")) {\n                    throw new Error(`No contract found at address \"${address}\"`);\n                }\n                else {\n                    throw error;\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    async txsQuery(query) {\n        const results = await this.forceGetCometClient().txSearchAll({ query: query });\n        return results.txs.map((tx) => {\n            const txMsgData = abci_1.TxMsgData.decode(tx.result.data ?? new Uint8Array());\n            return {\n                height: tx.height,\n                txIndex: tx.index,\n                hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n                code: tx.result.code,\n                events: tx.result.events.map(stargate_1.fromTendermintEvent),\n                rawLog: tx.result.log || \"\",\n                tx: tx.tx,\n                msgResponses: txMsgData.msgResponses,\n                gasUsed: tx.result.gasUsed,\n                gasWanted: tx.result.gasWanted,\n            };\n        });\n    }\n}\nexports.CosmWasmClient = CosmWasmClient;\n//# sourceMappingURL=cosmwasmclient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/encoding.js":
/*!******************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/encoding.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromBinary = exports.toBinary = void 0;\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"./node_modules/@cosmjs/encoding/build/index.js\");\n/**\n * Takes a value, serializes it to JSON and encodes it as base64.\n *\n * This can be used for creating values of fields that have the CosmWasm Binary type.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction toBinary(obj) {\n    return (0, encoding_1.toBase64)((0, encoding_1.toUtf8)(JSON.stringify(obj)));\n}\nexports.toBinary = toBinary;\n/**\n * Takes a base64 string, decodes it and parses the content from JSON to an object.\n *\n * This can be used for parsing the values of a CosmWasm Binary field.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction fromBinary(base64) {\n    return JSON.parse((0, encoding_1.fromUtf8)((0, encoding_1.fromBase64)(base64)));\n}\nexports.fromBinary = fromBinary;\n//# sourceMappingURL=encoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9lbmNvZGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxnQkFBZ0I7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsd0VBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvY29zbXdhc20tc3RhcmdhdGUvYnVpbGQvZW5jb2RpbmcuanM/ODFlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUJpbmFyeSA9IGV4cG9ydHMudG9CaW5hcnkgPSB2b2lkIDA7XG5jb25zdCBlbmNvZGluZ18xID0gcmVxdWlyZShcIkBjb3NtanMvZW5jb2RpbmdcIik7XG4vKipcbiAqIFRha2VzIGEgdmFsdWUsIHNlcmlhbGl6ZXMgaXQgdG8gSlNPTiBhbmQgZW5jb2RlcyBpdCBhcyBiYXNlNjQuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZCBmb3IgY3JlYXRpbmcgdmFsdWVzIG9mIGZpZWxkcyB0aGF0IGhhdmUgdGhlIENvc21XYXNtIEJpbmFyeSB0eXBlLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZnVuY3Rpb24gdG9CaW5hcnkob2JqKSB7XG4gICAgcmV0dXJuICgwLCBlbmNvZGluZ18xLnRvQmFzZTY0KSgoMCwgZW5jb2RpbmdfMS50b1V0ZjgpKEpTT04uc3RyaW5naWZ5KG9iaikpKTtcbn1cbmV4cG9ydHMudG9CaW5hcnkgPSB0b0JpbmFyeTtcbi8qKlxuICogVGFrZXMgYSBiYXNlNjQgc3RyaW5nLCBkZWNvZGVzIGl0IGFuZCBwYXJzZXMgdGhlIGNvbnRlbnQgZnJvbSBKU09OIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBwYXJzaW5nIHRoZSB2YWx1ZXMgb2YgYSBDb3NtV2FzbSBCaW5hcnkgZmllbGQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5mdW5jdGlvbiBmcm9tQmluYXJ5KGJhc2U2NCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKCgwLCBlbmNvZGluZ18xLmZyb21VdGY4KSgoMCwgZW5jb2RpbmdfMS5mcm9tQmFzZTY0KShiYXNlNjQpKSk7XG59XG5leHBvcnRzLmZyb21CaW5hcnkgPSBmcm9tQmluYXJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/encoding.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SigningCosmWasmClient = exports.wasmTypes = exports.setupWasmExtension = exports.isMsgUpdateAdminEncodeObject = exports.isMsgStoreCodeEncodeObject = exports.isMsgMigrateEncodeObject = exports.isMsgInstantiateContractEncodeObject = exports.isMsgInstantiateContract2EncodeObject = exports.isMsgExecuteEncodeObject = exports.isMsgClearAdminEncodeObject = exports.createWasmAminoConverters = exports.instantiate2Address = exports._instantiate2AddressIntermediate = exports.toBinary = exports.fromBinary = exports.CosmWasmClient = void 0;\nvar cosmwasmclient_1 = __webpack_require__(/*! ./cosmwasmclient */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js\");\nObject.defineProperty(exports, \"CosmWasmClient\", ({ enumerable: true, get: function () { return cosmwasmclient_1.CosmWasmClient; } }));\nvar encoding_1 = __webpack_require__(/*! ./encoding */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/encoding.js\");\nObject.defineProperty(exports, \"fromBinary\", ({ enumerable: true, get: function () { return encoding_1.fromBinary; } }));\nObject.defineProperty(exports, \"toBinary\", ({ enumerable: true, get: function () { return encoding_1.toBinary; } }));\nvar instantiate2_1 = __webpack_require__(/*! ./instantiate2 */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/instantiate2.js\");\nObject.defineProperty(exports, \"_instantiate2AddressIntermediate\", ({ enumerable: true, get: function () { return instantiate2_1._instantiate2AddressIntermediate; } }));\nObject.defineProperty(exports, \"instantiate2Address\", ({ enumerable: true, get: function () { return instantiate2_1.instantiate2Address; } }));\nvar modules_1 = __webpack_require__(/*! ./modules */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/modules/index.js\");\nObject.defineProperty(exports, \"createWasmAminoConverters\", ({ enumerable: true, get: function () { return modules_1.createWasmAminoConverters; } }));\nObject.defineProperty(exports, \"isMsgClearAdminEncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgClearAdminEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgExecuteEncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgExecuteEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgInstantiateContract2EncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgInstantiateContract2EncodeObject; } }));\nObject.defineProperty(exports, \"isMsgInstantiateContractEncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgInstantiateContractEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgMigrateEncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgMigrateEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgStoreCodeEncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgStoreCodeEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgUpdateAdminEncodeObject\", ({ enumerable: true, get: function () { return modules_1.isMsgUpdateAdminEncodeObject; } }));\nObject.defineProperty(exports, \"setupWasmExtension\", ({ enumerable: true, get: function () { return modules_1.setupWasmExtension; } }));\nObject.defineProperty(exports, \"wasmTypes\", ({ enumerable: true, get: function () { return modules_1.wasmTypes; } }));\nvar signingcosmwasmclient_1 = __webpack_require__(/*! ./signingcosmwasmclient */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js\");\nObject.defineProperty(exports, \"SigningCosmWasmClient\", ({ enumerable: true, get: function () { return signingcosmwasmclient_1.SigningCosmWasmClient; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyxpQkFBaUIsR0FBRywwQkFBMEIsR0FBRyxvQ0FBb0MsR0FBRyxrQ0FBa0MsR0FBRyxnQ0FBZ0MsR0FBRyw0Q0FBNEMsR0FBRyw2Q0FBNkMsR0FBRyxnQ0FBZ0MsR0FBRyxtQ0FBbUMsR0FBRyxpQ0FBaUMsR0FBRywyQkFBMkIsR0FBRyx3Q0FBd0MsR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxzQkFBc0I7QUFDbmhCLHVCQUF1QixtQkFBTyxDQUFDLDBGQUFrQjtBQUNqRCxrREFBaUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDcEksaUJBQWlCLG1CQUFPLENBQUMsOEVBQVk7QUFDckMsOENBQTZDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3RILDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxxQkFBcUIsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDN0Msb0VBQW1FLEVBQUUscUNBQXFDLDJEQUEyRCxFQUFDO0FBQ3RLLHVEQUFzRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUM1SSxnQkFBZ0IsbUJBQU8sQ0FBQyxrRkFBVztBQUNuQyw2REFBNEQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDbkosK0RBQThELEVBQUUscUNBQXFDLGlEQUFpRCxFQUFDO0FBQ3ZKLDREQUEyRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUNqSix5RUFBd0UsRUFBRSxxQ0FBcUMsMkRBQTJELEVBQUM7QUFDM0ssd0VBQXVFLEVBQUUscUNBQXFDLDBEQUEwRCxFQUFDO0FBQ3pLLDREQUEyRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUNqSiw4REFBNkQsRUFBRSxxQ0FBcUMsZ0RBQWdELEVBQUM7QUFDckosZ0VBQStELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQ3pKLHNEQUFxRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNySSw2Q0FBNEMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbkgsOEJBQThCLG1CQUFPLENBQUMsd0dBQXlCO0FBQy9ELHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6SiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9pbmRleC5qcz83Mzc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaWduaW5nQ29zbVdhc21DbGllbnQgPSBleHBvcnRzLndhc21UeXBlcyA9IGV4cG9ydHMuc2V0dXBXYXNtRXh0ZW5zaW9uID0gZXhwb3J0cy5pc01zZ1VwZGF0ZUFkbWluRW5jb2RlT2JqZWN0ID0gZXhwb3J0cy5pc01zZ1N0b3JlQ29kZUVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNNc2dNaWdyYXRlRW5jb2RlT2JqZWN0ID0gZXhwb3J0cy5pc01zZ0luc3RhbnRpYXRlQ29udHJhY3RFbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnSW5zdGFudGlhdGVDb250cmFjdDJFbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnRXhlY3V0ZUVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNNc2dDbGVhckFkbWluRW5jb2RlT2JqZWN0ID0gZXhwb3J0cy5jcmVhdGVXYXNtQW1pbm9Db252ZXJ0ZXJzID0gZXhwb3J0cy5pbnN0YW50aWF0ZTJBZGRyZXNzID0gZXhwb3J0cy5faW5zdGFudGlhdGUyQWRkcmVzc0ludGVybWVkaWF0ZSA9IGV4cG9ydHMudG9CaW5hcnkgPSBleHBvcnRzLmZyb21CaW5hcnkgPSBleHBvcnRzLkNvc21XYXNtQ2xpZW50ID0gdm9pZCAwO1xudmFyIGNvc213YXNtY2xpZW50XzEgPSByZXF1aXJlKFwiLi9jb3Ntd2FzbWNsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvc21XYXNtQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3Ntd2FzbWNsaWVudF8xLkNvc21XYXNtQ2xpZW50OyB9IH0pO1xudmFyIGVuY29kaW5nXzEgPSByZXF1aXJlKFwiLi9lbmNvZGluZ1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21CaW5hcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kaW5nXzEuZnJvbUJpbmFyeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQmluYXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGluZ18xLnRvQmluYXJ5OyB9IH0pO1xudmFyIGluc3RhbnRpYXRlMl8xID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGUyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX2luc3RhbnRpYXRlMkFkZHJlc3NJbnRlcm1lZGlhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RhbnRpYXRlMl8xLl9pbnN0YW50aWF0ZTJBZGRyZXNzSW50ZXJtZWRpYXRlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5zdGFudGlhdGUyQWRkcmVzc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdGFudGlhdGUyXzEuaW5zdGFudGlhdGUyQWRkcmVzczsgfSB9KTtcbnZhciBtb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlV2FzbUFtaW5vQ29udmVydGVyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlc18xLmNyZWF0ZVdhc21BbWlub0NvbnZlcnRlcnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc01zZ0NsZWFyQWRtaW5FbmNvZGVPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZXNfMS5pc01zZ0NsZWFyQWRtaW5FbmNvZGVPYmplY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZXNfMS5pc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc01zZ0luc3RhbnRpYXRlQ29udHJhY3QyRW5jb2RlT2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGVzXzEuaXNNc2dJbnN0YW50aWF0ZUNvbnRyYWN0MkVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlc18xLmlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXNnTWlncmF0ZUVuY29kZU9iamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlc18xLmlzTXNnTWlncmF0ZUVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXNnU3RvcmVDb2RlRW5jb2RlT2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGVzXzEuaXNNc2dTdG9yZUNvZGVFbmNvZGVPYmplY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc01zZ1VwZGF0ZUFkbWluRW5jb2RlT2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGVzXzEuaXNNc2dVcGRhdGVBZG1pbkVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNldHVwV2FzbUV4dGVuc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlc18xLnNldHVwV2FzbUV4dGVuc2lvbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndhc21UeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlc18xLndhc21UeXBlczsgfSB9KTtcbnZhciBzaWduaW5nY29zbXdhc21jbGllbnRfMSA9IHJlcXVpcmUoXCIuL3NpZ25pbmdjb3Ntd2FzbWNsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNpZ25pbmdDb3NtV2FzbUNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmluZ2Nvc213YXNtY2xpZW50XzEuU2lnbmluZ0Nvc21XYXNtQ2xpZW50OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/index.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/instantiate2.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/instantiate2.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.instantiate2Address = exports._instantiate2AddressIntermediate = void 0;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"./node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"./node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"./node_modules/@cosmjs/math/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"./node_modules/@cosmjs/utils/build/index.js\");\n/**\n * The \"Basic Address\" Hash from\n * https://github.com/cosmos/cosmos-sdk/blob/v0.45.8/docs/architecture/adr-028-public-key-addresses.md\n */\nfunction hash(type, key) {\n    return new crypto_1.Sha256((0, crypto_1.sha256)((0, encoding_1.toAscii)(type))).update(key).digest();\n}\n/**\n * Takes an integer [0, 2**64-1] and returns a one-byte encoding of it.\n */\nfunction toUint64(int) {\n    return math_1.Uint64.fromNumber(int).toBytesBigEndian();\n}\n/**\n * Private function to export test vector data for https://github.com/cosmos/cosmjs/pull/1253.\n * Do not use in production code.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _instantiate2AddressIntermediate(checksum, creator, salt, msg, prefix) {\n    (0, utils_1.assert)(checksum.length === 32);\n    const creatorData = (0, encoding_1.fromBech32)(creator).data;\n    const msgData = typeof msg === \"string\" ? (0, encoding_1.toUtf8)(msg) : new Uint8Array();\n    // Validate inputs\n    if (salt.length < 1 || salt.length > 64)\n        throw new Error(\"Salt must be between 1 and 64 bytes\");\n    const key = new Uint8Array([\n        ...(0, encoding_1.toAscii)(\"wasm\"),\n        0x00,\n        ...toUint64(checksum.length),\n        ...checksum,\n        ...toUint64(creatorData.length),\n        ...creatorData,\n        ...toUint64(salt.length),\n        ...salt,\n        ...toUint64(msgData.length),\n        ...msgData,\n    ]);\n    const addressData = hash(\"module\", key);\n    const address = (0, encoding_1.toBech32)(prefix, addressData);\n    return { key, addressData, address };\n}\nexports._instantiate2AddressIntermediate = _instantiate2AddressIntermediate;\n/**\n * Predictable address generation for the MsgInstantiateContract2\n * introduced with wasmd 0.29.\n */\nfunction instantiate2Address(checksum, creator, salt, prefix) {\n    // Non-empty msg values are discouraged.\n    // See https://medium.com/cosmwasm/dev-note-3-limitations-of-instantiate2-and-how-to-deal-with-them-a3f946874230.\n    const msg = null;\n    return _instantiate2AddressIntermediate(checksum, creator, salt, msg, prefix).address;\n}\nexports.instantiate2Address = instantiate2Address;\n//# sourceMappingURL=instantiate2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9pbnN0YW50aWF0ZTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsd0NBQXdDO0FBQ3RFLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFnQjtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyx3RUFBa0I7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLGdFQUFjO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9pbnN0YW50aWF0ZTIuanM/MmY2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5zdGFudGlhdGUyQWRkcmVzcyA9IGV4cG9ydHMuX2luc3RhbnRpYXRlMkFkZHJlc3NJbnRlcm1lZGlhdGUgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJAY29zbWpzL2NyeXB0b1wiKTtcbmNvbnN0IGVuY29kaW5nXzEgPSByZXF1aXJlKFwiQGNvc21qcy9lbmNvZGluZ1wiKTtcbmNvbnN0IG1hdGhfMSA9IHJlcXVpcmUoXCJAY29zbWpzL21hdGhcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBjb3NtanMvdXRpbHNcIik7XG4vKipcbiAqIFRoZSBcIkJhc2ljIEFkZHJlc3NcIiBIYXNoIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay9ibG9iL3YwLjQ1LjgvZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTAyOC1wdWJsaWMta2V5LWFkZHJlc3Nlcy5tZFxuICovXG5mdW5jdGlvbiBoYXNoKHR5cGUsIGtleSkge1xuICAgIHJldHVybiBuZXcgY3J5cHRvXzEuU2hhMjU2KCgwLCBjcnlwdG9fMS5zaGEyNTYpKCgwLCBlbmNvZGluZ18xLnRvQXNjaWkpKHR5cGUpKSkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG59XG4vKipcbiAqIFRha2VzIGFuIGludGVnZXIgWzAsIDIqKjY0LTFdIGFuZCByZXR1cm5zIGEgb25lLWJ5dGUgZW5jb2Rpbmcgb2YgaXQuXG4gKi9cbmZ1bmN0aW9uIHRvVWludDY0KGludCkge1xuICAgIHJldHVybiBtYXRoXzEuVWludDY0LmZyb21OdW1iZXIoaW50KS50b0J5dGVzQmlnRW5kaWFuKCk7XG59XG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb24gdG8gZXhwb3J0IHRlc3QgdmVjdG9yIGRhdGEgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbWpzL3B1bGwvMTI1My5cbiAqIERvIG5vdCB1c2UgaW4gcHJvZHVjdGlvbiBjb2RlLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5mdW5jdGlvbiBfaW5zdGFudGlhdGUyQWRkcmVzc0ludGVybWVkaWF0ZShjaGVja3N1bSwgY3JlYXRvciwgc2FsdCwgbXNnLCBwcmVmaXgpIHtcbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGNoZWNrc3VtLmxlbmd0aCA9PT0gMzIpO1xuICAgIGNvbnN0IGNyZWF0b3JEYXRhID0gKDAsIGVuY29kaW5nXzEuZnJvbUJlY2gzMikoY3JlYXRvcikuZGF0YTtcbiAgICBjb25zdCBtc2dEYXRhID0gdHlwZW9mIG1zZyA9PT0gXCJzdHJpbmdcIiA/ICgwLCBlbmNvZGluZ18xLnRvVXRmOCkobXNnKSA6IG5ldyBVaW50OEFycmF5KCk7XG4gICAgLy8gVmFsaWRhdGUgaW5wdXRzXG4gICAgaWYgKHNhbHQubGVuZ3RoIDwgMSB8fCBzYWx0Lmxlbmd0aCA+IDY0KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTYWx0IG11c3QgYmUgYmV0d2VlbiAxIGFuZCA2NCBieXRlc1wiKTtcbiAgICBjb25zdCBrZXkgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAgIC4uLigwLCBlbmNvZGluZ18xLnRvQXNjaWkpKFwid2FzbVwiKSxcbiAgICAgICAgMHgwMCxcbiAgICAgICAgLi4udG9VaW50NjQoY2hlY2tzdW0ubGVuZ3RoKSxcbiAgICAgICAgLi4uY2hlY2tzdW0sXG4gICAgICAgIC4uLnRvVWludDY0KGNyZWF0b3JEYXRhLmxlbmd0aCksXG4gICAgICAgIC4uLmNyZWF0b3JEYXRhLFxuICAgICAgICAuLi50b1VpbnQ2NChzYWx0Lmxlbmd0aCksXG4gICAgICAgIC4uLnNhbHQsXG4gICAgICAgIC4uLnRvVWludDY0KG1zZ0RhdGEubGVuZ3RoKSxcbiAgICAgICAgLi4ubXNnRGF0YSxcbiAgICBdKTtcbiAgICBjb25zdCBhZGRyZXNzRGF0YSA9IGhhc2goXCJtb2R1bGVcIiwga2V5KTtcbiAgICBjb25zdCBhZGRyZXNzID0gKDAsIGVuY29kaW5nXzEudG9CZWNoMzIpKHByZWZpeCwgYWRkcmVzc0RhdGEpO1xuICAgIHJldHVybiB7IGtleSwgYWRkcmVzc0RhdGEsIGFkZHJlc3MgfTtcbn1cbmV4cG9ydHMuX2luc3RhbnRpYXRlMkFkZHJlc3NJbnRlcm1lZGlhdGUgPSBfaW5zdGFudGlhdGUyQWRkcmVzc0ludGVybWVkaWF0ZTtcbi8qKlxuICogUHJlZGljdGFibGUgYWRkcmVzcyBnZW5lcmF0aW9uIGZvciB0aGUgTXNnSW5zdGFudGlhdGVDb250cmFjdDJcbiAqIGludHJvZHVjZWQgd2l0aCB3YXNtZCAwLjI5LlxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZTJBZGRyZXNzKGNoZWNrc3VtLCBjcmVhdG9yLCBzYWx0LCBwcmVmaXgpIHtcbiAgICAvLyBOb24tZW1wdHkgbXNnIHZhbHVlcyBhcmUgZGlzY291cmFnZWQuXG4gICAgLy8gU2VlIGh0dHBzOi8vbWVkaXVtLmNvbS9jb3Ntd2FzbS9kZXYtbm90ZS0zLWxpbWl0YXRpb25zLW9mLWluc3RhbnRpYXRlMi1hbmQtaG93LXRvLWRlYWwtd2l0aC10aGVtLWEzZjk0Njg3NDIzMC5cbiAgICBjb25zdCBtc2cgPSBudWxsO1xuICAgIHJldHVybiBfaW5zdGFudGlhdGUyQWRkcmVzc0ludGVybWVkaWF0ZShjaGVja3N1bSwgY3JlYXRvciwgc2FsdCwgbXNnLCBwcmVmaXgpLmFkZHJlc3M7XG59XG5leHBvcnRzLmluc3RhbnRpYXRlMkFkZHJlc3MgPSBpbnN0YW50aWF0ZTJBZGRyZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdGFudGlhdGUyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/instantiate2.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/modules/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/modules/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setupWasmExtension = exports.wasmTypes = exports.isMsgUpdateAdminEncodeObject = exports.isMsgStoreCodeEncodeObject = exports.isMsgMigrateEncodeObject = exports.isMsgInstantiateContractEncodeObject = exports.isMsgInstantiateContract2EncodeObject = exports.isMsgExecuteEncodeObject = exports.isMsgClearAdminEncodeObject = exports.createWasmAminoConverters = void 0;\nvar aminomessages_1 = __webpack_require__(/*! ./wasm/aminomessages */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/aminomessages.js\");\nObject.defineProperty(exports, \"createWasmAminoConverters\", ({ enumerable: true, get: function () { return aminomessages_1.createWasmAminoConverters; } }));\nvar messages_1 = __webpack_require__(/*! ./wasm/messages */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/messages.js\");\nObject.defineProperty(exports, \"isMsgClearAdminEncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgClearAdminEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgExecuteEncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgExecuteEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgInstantiateContract2EncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgInstantiateContract2EncodeObject; } }));\nObject.defineProperty(exports, \"isMsgInstantiateContractEncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgInstantiateContractEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgMigrateEncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgMigrateEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgStoreCodeEncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgStoreCodeEncodeObject; } }));\nObject.defineProperty(exports, \"isMsgUpdateAdminEncodeObject\", ({ enumerable: true, get: function () { return messages_1.isMsgUpdateAdminEncodeObject; } }));\nObject.defineProperty(exports, \"wasmTypes\", ({ enumerable: true, get: function () { return messages_1.wasmTypes; } }));\nvar queries_1 = __webpack_require__(/*! ./wasm/queries */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js\");\nObject.defineProperty(exports, \"setupWasmExtension\", ({ enumerable: true, get: function () { return queries_1.setupWasmExtension; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9tb2R1bGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLGlCQUFpQixHQUFHLG9DQUFvQyxHQUFHLGtDQUFrQyxHQUFHLGdDQUFnQyxHQUFHLDRDQUE0QyxHQUFHLDZDQUE2QyxHQUFHLGdDQUFnQyxHQUFHLG1DQUFtQyxHQUFHLGlDQUFpQztBQUN6VyxzQkFBc0IsbUJBQU8sQ0FBQywwR0FBc0I7QUFDcEQsNkRBQTRELEVBQUUscUNBQXFDLHFEQUFxRCxFQUFDO0FBQ3pKLGlCQUFpQixtQkFBTyxDQUFDLGdHQUFpQjtBQUMxQywrREFBOEQsRUFBRSxxQ0FBcUMsa0RBQWtELEVBQUM7QUFDeEosNERBQTJELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQ2xKLHlFQUF3RSxFQUFFLHFDQUFxQyw0REFBNEQsRUFBQztBQUM1Syx3RUFBdUUsRUFBRSxxQ0FBcUMsMkRBQTJELEVBQUM7QUFDMUssNERBQTJELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQ2xKLDhEQUE2RCxFQUFFLHFDQUFxQyxpREFBaUQsRUFBQztBQUN0SixnRUFBK0QsRUFBRSxxQ0FBcUMsbURBQW1ELEVBQUM7QUFDMUosNkNBQTRDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ3BILGdCQUFnQixtQkFBTyxDQUFDLDhGQUFnQjtBQUN4QyxzREFBcUQsRUFBRSxxQ0FBcUMsd0NBQXdDLEVBQUM7QUFDckkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvY29zbXdhc20tc3RhcmdhdGUvYnVpbGQvbW9kdWxlcy9pbmRleC5qcz8yZjE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXR1cFdhc21FeHRlbnNpb24gPSBleHBvcnRzLndhc21UeXBlcyA9IGV4cG9ydHMuaXNNc2dVcGRhdGVBZG1pbkVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNNc2dTdG9yZUNvZGVFbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnTWlncmF0ZUVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNNc2dJbnN0YW50aWF0ZUNvbnRyYWN0RW5jb2RlT2JqZWN0ID0gZXhwb3J0cy5pc01zZ0luc3RhbnRpYXRlQ29udHJhY3QyRW5jb2RlT2JqZWN0ID0gZXhwb3J0cy5pc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnQ2xlYXJBZG1pbkVuY29kZU9iamVjdCA9IGV4cG9ydHMuY3JlYXRlV2FzbUFtaW5vQ29udmVydGVycyA9IHZvaWQgMDtcbnZhciBhbWlub21lc3NhZ2VzXzEgPSByZXF1aXJlKFwiLi93YXNtL2FtaW5vbWVzc2FnZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVXYXNtQW1pbm9Db252ZXJ0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhbWlub21lc3NhZ2VzXzEuY3JlYXRlV2FzbUFtaW5vQ29udmVydGVyczsgfSB9KTtcbnZhciBtZXNzYWdlc18xID0gcmVxdWlyZShcIi4vd2FzbS9tZXNzYWdlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXNnQ2xlYXJBZG1pbkVuY29kZU9iamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5pc01zZ0NsZWFyQWRtaW5FbmNvZGVPYmplY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuaXNNc2dFeGVjdXRlRW5jb2RlT2JqZWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNNc2dJbnN0YW50aWF0ZUNvbnRyYWN0MkVuY29kZU9iamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5pc01zZ0luc3RhbnRpYXRlQ29udHJhY3QyRW5jb2RlT2JqZWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNNc2dJbnN0YW50aWF0ZUNvbnRyYWN0RW5jb2RlT2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLmlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXNnTWlncmF0ZUVuY29kZU9iamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5pc01zZ01pZ3JhdGVFbmNvZGVPYmplY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc01zZ1N0b3JlQ29kZUVuY29kZU9iamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5pc01zZ1N0b3JlQ29kZUVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXNnVXBkYXRlQWRtaW5FbmNvZGVPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuaXNNc2dVcGRhdGVBZG1pbkVuY29kZU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndhc21UeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS53YXNtVHlwZXM7IH0gfSk7XG52YXIgcXVlcmllc18xID0gcmVxdWlyZShcIi4vd2FzbS9xdWVyaWVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0dXBXYXNtRXh0ZW5zaW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWVyaWVzXzEuc2V0dXBXYXNtRXh0ZW5zaW9uOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/modules/index.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/aminomessages.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/aminomessages.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createWasmAminoConverters = exports.accessTypeToString = exports.accessTypeFromString = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"./node_modules/@cosmjs/amino/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"./node_modules/@cosmjs/encoding/build/index.js\");\nconst types_1 = __webpack_require__(/*! cosmjs-types/cosmwasm/wasm/v1/types */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js\");\nfunction accessTypeFromString(str) {\n    switch (str) {\n        case \"Unspecified\":\n            return types_1.AccessType.ACCESS_TYPE_UNSPECIFIED;\n        case \"Nobody\":\n            return types_1.AccessType.ACCESS_TYPE_NOBODY;\n        case \"OnlyAddress\":\n            return types_1.AccessType.ACCESS_TYPE_ONLY_ADDRESS;\n        case \"Everybody\":\n            return types_1.AccessType.ACCESS_TYPE_EVERYBODY;\n        case \"AnyOfAddresses\":\n            return types_1.AccessType.ACCESS_TYPE_ANY_OF_ADDRESSES;\n        default:\n            return types_1.AccessType.UNRECOGNIZED;\n    }\n}\nexports.accessTypeFromString = accessTypeFromString;\nfunction accessTypeToString(object) {\n    switch (object) {\n        case types_1.AccessType.ACCESS_TYPE_UNSPECIFIED:\n            return \"Unspecified\";\n        case types_1.AccessType.ACCESS_TYPE_NOBODY:\n            return \"Nobody\";\n        case types_1.AccessType.ACCESS_TYPE_ONLY_ADDRESS:\n            return \"OnlyAddress\";\n        case types_1.AccessType.ACCESS_TYPE_EVERYBODY:\n            return \"Everybody\";\n        case types_1.AccessType.ACCESS_TYPE_ANY_OF_ADDRESSES:\n            return \"AnyOfAddresses\";\n        case types_1.AccessType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.accessTypeToString = accessTypeToString;\nfunction createWasmAminoConverters() {\n    return {\n        \"/cosmwasm.wasm.v1.MsgStoreCode\": {\n            aminoType: \"wasm/MsgStoreCode\",\n            toAmino: ({ sender, wasmByteCode, instantiatePermission, }) => ({\n                sender: sender,\n                wasm_byte_code: (0, encoding_1.toBase64)(wasmByteCode),\n                instantiate_permission: instantiatePermission\n                    ? {\n                        permission: accessTypeToString(instantiatePermission.permission),\n                        address: instantiatePermission.address || undefined,\n                        addresses: instantiatePermission.addresses.length !== 0 ? instantiatePermission.addresses : undefined,\n                    }\n                    : undefined,\n            }),\n            fromAmino: ({ sender, wasm_byte_code, instantiate_permission, }) => ({\n                sender: sender,\n                wasmByteCode: (0, encoding_1.fromBase64)(wasm_byte_code),\n                instantiatePermission: instantiate_permission\n                    ? types_1.AccessConfig.fromPartial({\n                        permission: accessTypeFromString(instantiate_permission.permission),\n                        address: instantiate_permission.address ?? \"\",\n                        addresses: instantiate_permission.addresses ?? [],\n                    })\n                    : undefined,\n            }),\n        },\n        \"/cosmwasm.wasm.v1.MsgInstantiateContract\": {\n            aminoType: \"wasm/MsgInstantiateContract\",\n            toAmino: ({ sender, codeId, label, msg, funds, admin, }) => ({\n                sender: sender,\n                code_id: codeId.toString(),\n                label: label,\n                msg: JSON.parse((0, encoding_1.fromUtf8)(msg)),\n                funds: funds,\n                admin: (0, amino_1.omitDefault)(admin),\n            }),\n            fromAmino: ({ sender, code_id, label, msg, funds, admin, }) => ({\n                sender: sender,\n                codeId: BigInt(code_id),\n                label: label,\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n                funds: [...funds],\n                admin: admin ?? \"\",\n            }),\n        },\n        \"/cosmwasm.wasm.v1.MsgInstantiateContract2\": {\n            aminoType: \"wasm/MsgInstantiateContract2\",\n            toAmino: ({ sender, codeId, label, msg, funds, admin, salt, fixMsg, }) => ({\n                sender: sender,\n                code_id: codeId.toString(),\n                label: label,\n                msg: JSON.parse((0, encoding_1.fromUtf8)(msg)),\n                funds: funds,\n                admin: (0, amino_1.omitDefault)(admin),\n                salt: (0, encoding_1.toBase64)(salt),\n                fix_msg: (0, amino_1.omitDefault)(fixMsg),\n            }),\n            fromAmino: ({ sender, code_id, label, msg, funds, admin, salt, fix_msg, }) => ({\n                sender: sender,\n                codeId: BigInt(code_id),\n                label: label,\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n                funds: [...funds],\n                admin: admin ?? \"\",\n                salt: (0, encoding_1.fromBase64)(salt),\n                fixMsg: fix_msg ?? false,\n            }),\n        },\n        \"/cosmwasm.wasm.v1.MsgUpdateAdmin\": {\n            aminoType: \"wasm/MsgUpdateAdmin\",\n            toAmino: ({ sender, newAdmin, contract }) => ({\n                sender: sender,\n                new_admin: newAdmin,\n                contract: contract,\n            }),\n            fromAmino: ({ sender, new_admin, contract }) => ({\n                sender: sender,\n                newAdmin: new_admin,\n                contract: contract,\n            }),\n        },\n        \"/cosmwasm.wasm.v1.MsgClearAdmin\": {\n            aminoType: \"wasm/MsgClearAdmin\",\n            toAmino: ({ sender, contract }) => ({\n                sender: sender,\n                contract: contract,\n            }),\n            fromAmino: ({ sender, contract }) => ({\n                sender: sender,\n                contract: contract,\n            }),\n        },\n        \"/cosmwasm.wasm.v1.MsgExecuteContract\": {\n            aminoType: \"wasm/MsgExecuteContract\",\n            toAmino: ({ sender, contract, msg, funds }) => ({\n                sender: sender,\n                contract: contract,\n                msg: JSON.parse((0, encoding_1.fromUtf8)(msg)),\n                funds: funds,\n            }),\n            fromAmino: ({ sender, contract, msg, funds, }) => ({\n                sender: sender,\n                contract: contract,\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n                funds: [...funds],\n            }),\n        },\n        \"/cosmwasm.wasm.v1.MsgMigrateContract\": {\n            aminoType: \"wasm/MsgMigrateContract\",\n            toAmino: ({ sender, contract, codeId, msg }) => ({\n                sender: sender,\n                contract: contract,\n                code_id: codeId.toString(),\n                msg: JSON.parse((0, encoding_1.fromUtf8)(msg)),\n            }),\n            fromAmino: ({ sender, contract, code_id, msg, }) => ({\n                sender: sender,\n                contract: contract,\n                codeId: BigInt(code_id),\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n            }),\n        },\n    };\n}\nexports.createWasmAminoConverters = createWasmAminoConverters;\n//# sourceMappingURL=aminomessages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/aminomessages.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/messages.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/messages.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isMsgExecuteEncodeObject = exports.isMsgMigrateEncodeObject = exports.isMsgClearAdminEncodeObject = exports.isMsgUpdateAdminEncodeObject = exports.isMsgInstantiateContract2EncodeObject = exports.isMsgInstantiateContractEncodeObject = exports.isMsgStoreCodeEncodeObject = exports.wasmTypes = void 0;\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmwasm/wasm/v1/tx */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/tx.js\");\nexports.wasmTypes = [\n    [\"/cosmwasm.wasm.v1.MsgClearAdmin\", tx_1.MsgClearAdmin],\n    [\"/cosmwasm.wasm.v1.MsgExecuteContract\", tx_1.MsgExecuteContract],\n    [\"/cosmwasm.wasm.v1.MsgMigrateContract\", tx_1.MsgMigrateContract],\n    [\"/cosmwasm.wasm.v1.MsgStoreCode\", tx_1.MsgStoreCode],\n    [\"/cosmwasm.wasm.v1.MsgInstantiateContract\", tx_1.MsgInstantiateContract],\n    [\"/cosmwasm.wasm.v1.MsgInstantiateContract2\", tx_1.MsgInstantiateContract2],\n    [\"/cosmwasm.wasm.v1.MsgUpdateAdmin\", tx_1.MsgUpdateAdmin],\n];\nfunction isMsgStoreCodeEncodeObject(object) {\n    return object.typeUrl === \"/cosmwasm.wasm.v1.MsgStoreCode\";\n}\nexports.isMsgStoreCodeEncodeObject = isMsgStoreCodeEncodeObject;\nfunction isMsgInstantiateContractEncodeObject(object) {\n    return (object.typeUrl === \"/cosmwasm.wasm.v1.MsgInstantiateContract\");\n}\nexports.isMsgInstantiateContractEncodeObject = isMsgInstantiateContractEncodeObject;\nfunction isMsgInstantiateContract2EncodeObject(object) {\n    return (object.typeUrl === \"/cosmwasm.wasm.v1.MsgInstantiateContract2\");\n}\nexports.isMsgInstantiateContract2EncodeObject = isMsgInstantiateContract2EncodeObject;\nfunction isMsgUpdateAdminEncodeObject(object) {\n    return object.typeUrl === \"/cosmwasm.wasm.v1.MsgUpdateAdmin\";\n}\nexports.isMsgUpdateAdminEncodeObject = isMsgUpdateAdminEncodeObject;\nfunction isMsgClearAdminEncodeObject(object) {\n    return object.typeUrl === \"/cosmwasm.wasm.v1.MsgClearAdmin\";\n}\nexports.isMsgClearAdminEncodeObject = isMsgClearAdminEncodeObject;\nfunction isMsgMigrateEncodeObject(object) {\n    return object.typeUrl === \"/cosmwasm.wasm.v1.MsgMigrateContract\";\n}\nexports.isMsgMigrateEncodeObject = isMsgMigrateEncodeObject;\nfunction isMsgExecuteEncodeObject(object) {\n    return object.typeUrl === \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n}\nexports.isMsgExecuteEncodeObject = isMsgExecuteEncodeObject;\n//# sourceMappingURL=messages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9tb2R1bGVzL3dhc20vbWVzc2FnZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsZ0NBQWdDLEdBQUcsbUNBQW1DLEdBQUcsb0NBQW9DLEdBQUcsNkNBQTZDLEdBQUcsNENBQTRDLEdBQUcsa0NBQWtDLEdBQUcsaUJBQWlCO0FBQ3hTLGFBQWEsbUJBQU8sQ0FBQyw0RkFBa0M7QUFDdkQsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvY29zbXdhc20tc3RhcmdhdGUvYnVpbGQvbW9kdWxlcy93YXNtL21lc3NhZ2VzLmpzPzNiMjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzTXNnRXhlY3V0ZUVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNNc2dNaWdyYXRlRW5jb2RlT2JqZWN0ID0gZXhwb3J0cy5pc01zZ0NsZWFyQWRtaW5FbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnVXBkYXRlQWRtaW5FbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnSW5zdGFudGlhdGVDb250cmFjdDJFbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNNc2dTdG9yZUNvZGVFbmNvZGVPYmplY3QgPSBleHBvcnRzLndhc21UeXBlcyA9IHZvaWQgMDtcbmNvbnN0IHR4XzEgPSByZXF1aXJlKFwiY29zbWpzLXR5cGVzL2Nvc213YXNtL3dhc20vdjEvdHhcIik7XG5leHBvcnRzLndhc21UeXBlcyA9IFtcbiAgICBbXCIvY29zbXdhc20ud2FzbS52MS5Nc2dDbGVhckFkbWluXCIsIHR4XzEuTXNnQ2xlYXJBZG1pbl0sXG4gICAgW1wiL2Nvc213YXNtLndhc20udjEuTXNnRXhlY3V0ZUNvbnRyYWN0XCIsIHR4XzEuTXNnRXhlY3V0ZUNvbnRyYWN0XSxcbiAgICBbXCIvY29zbXdhc20ud2FzbS52MS5Nc2dNaWdyYXRlQ29udHJhY3RcIiwgdHhfMS5Nc2dNaWdyYXRlQ29udHJhY3RdLFxuICAgIFtcIi9jb3Ntd2FzbS53YXNtLnYxLk1zZ1N0b3JlQ29kZVwiLCB0eF8xLk1zZ1N0b3JlQ29kZV0sXG4gICAgW1wiL2Nvc213YXNtLndhc20udjEuTXNnSW5zdGFudGlhdGVDb250cmFjdFwiLCB0eF8xLk1zZ0luc3RhbnRpYXRlQ29udHJhY3RdLFxuICAgIFtcIi9jb3Ntd2FzbS53YXNtLnYxLk1zZ0luc3RhbnRpYXRlQ29udHJhY3QyXCIsIHR4XzEuTXNnSW5zdGFudGlhdGVDb250cmFjdDJdLFxuICAgIFtcIi9jb3Ntd2FzbS53YXNtLnYxLk1zZ1VwZGF0ZUFkbWluXCIsIHR4XzEuTXNnVXBkYXRlQWRtaW5dLFxuXTtcbmZ1bmN0aW9uIGlzTXNnU3RvcmVDb2RlRW5jb2RlT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QudHlwZVVybCA9PT0gXCIvY29zbXdhc20ud2FzbS52MS5Nc2dTdG9yZUNvZGVcIjtcbn1cbmV4cG9ydHMuaXNNc2dTdG9yZUNvZGVFbmNvZGVPYmplY3QgPSBpc01zZ1N0b3JlQ29kZUVuY29kZU9iamVjdDtcbmZ1bmN0aW9uIGlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gKG9iamVjdC50eXBlVXJsID09PSBcIi9jb3Ntd2FzbS53YXNtLnYxLk1zZ0luc3RhbnRpYXRlQ29udHJhY3RcIik7XG59XG5leHBvcnRzLmlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdCA9IGlzTXNnSW5zdGFudGlhdGVDb250cmFjdEVuY29kZU9iamVjdDtcbmZ1bmN0aW9uIGlzTXNnSW5zdGFudGlhdGVDb250cmFjdDJFbmNvZGVPYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIChvYmplY3QudHlwZVVybCA9PT0gXCIvY29zbXdhc20ud2FzbS52MS5Nc2dJbnN0YW50aWF0ZUNvbnRyYWN0MlwiKTtcbn1cbmV4cG9ydHMuaXNNc2dJbnN0YW50aWF0ZUNvbnRyYWN0MkVuY29kZU9iamVjdCA9IGlzTXNnSW5zdGFudGlhdGVDb250cmFjdDJFbmNvZGVPYmplY3Q7XG5mdW5jdGlvbiBpc01zZ1VwZGF0ZUFkbWluRW5jb2RlT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QudHlwZVVybCA9PT0gXCIvY29zbXdhc20ud2FzbS52MS5Nc2dVcGRhdGVBZG1pblwiO1xufVxuZXhwb3J0cy5pc01zZ1VwZGF0ZUFkbWluRW5jb2RlT2JqZWN0ID0gaXNNc2dVcGRhdGVBZG1pbkVuY29kZU9iamVjdDtcbmZ1bmN0aW9uIGlzTXNnQ2xlYXJBZG1pbkVuY29kZU9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0LnR5cGVVcmwgPT09IFwiL2Nvc213YXNtLndhc20udjEuTXNnQ2xlYXJBZG1pblwiO1xufVxuZXhwb3J0cy5pc01zZ0NsZWFyQWRtaW5FbmNvZGVPYmplY3QgPSBpc01zZ0NsZWFyQWRtaW5FbmNvZGVPYmplY3Q7XG5mdW5jdGlvbiBpc01zZ01pZ3JhdGVFbmNvZGVPYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdC50eXBlVXJsID09PSBcIi9jb3Ntd2FzbS53YXNtLnYxLk1zZ01pZ3JhdGVDb250cmFjdFwiO1xufVxuZXhwb3J0cy5pc01zZ01pZ3JhdGVFbmNvZGVPYmplY3QgPSBpc01zZ01pZ3JhdGVFbmNvZGVPYmplY3Q7XG5mdW5jdGlvbiBpc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdC50eXBlVXJsID09PSBcIi9jb3Ntd2FzbS53YXNtLnYxLk1zZ0V4ZWN1dGVDb250cmFjdFwiO1xufVxuZXhwb3J0cy5pc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3QgPSBpc01zZ0V4ZWN1dGVFbmNvZGVPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/messages.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setupWasmExtension = void 0;\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"./node_modules/@cosmjs/encoding/build/index.js\");\nconst stargate_1 = __webpack_require__(/*! @cosmjs/stargate */ \"./node_modules/@cosmjs/stargate/build/index.js\");\nconst query_1 = __webpack_require__(/*! cosmjs-types/cosmwasm/wasm/v1/query */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/query.js\");\nfunction setupWasmExtension(base) {\n    const rpc = (0, stargate_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        wasm: {\n            listCodeInfo: async (paginationKey) => {\n                const request = {\n                    pagination: (0, stargate_1.createPagination)(paginationKey),\n                };\n                return queryService.Codes(request);\n            },\n            getCode: async (id) => {\n                const request = query_1.QueryCodeRequest.fromPartial({ codeId: BigInt(id) });\n                return queryService.Code(request);\n            },\n            listContractsByCodeId: async (id, paginationKey) => {\n                const request = query_1.QueryContractsByCodeRequest.fromPartial({\n                    codeId: BigInt(id),\n                    pagination: (0, stargate_1.createPagination)(paginationKey),\n                });\n                return queryService.ContractsByCode(request);\n            },\n            listContractsByCreator: async (creator, paginationKey) => {\n                const request = {\n                    creatorAddress: creator,\n                    pagination: (0, stargate_1.createPagination)(paginationKey),\n                };\n                return queryService.ContractsByCreator(request);\n            },\n            getContractInfo: async (address) => {\n                const request = { address: address };\n                return queryService.ContractInfo(request);\n            },\n            getContractCodeHistory: async (address, paginationKey) => {\n                const request = {\n                    address: address,\n                    pagination: (0, stargate_1.createPagination)(paginationKey),\n                };\n                return queryService.ContractHistory(request);\n            },\n            getAllContractState: async (address, paginationKey) => {\n                const request = {\n                    address: address,\n                    pagination: (0, stargate_1.createPagination)(paginationKey),\n                };\n                return queryService.AllContractState(request);\n            },\n            queryContractRaw: async (address, key) => {\n                const request = { address: address, queryData: key };\n                return queryService.RawContractState(request);\n            },\n            queryContractSmart: async (address, query) => {\n                const request = { address: address, queryData: (0, encoding_1.toUtf8)(JSON.stringify(query)) };\n                const { data } = await queryService.SmartContractState(request);\n                // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n                let responseText;\n                try {\n                    responseText = (0, encoding_1.fromUtf8)(data);\n                }\n                catch (error) {\n                    throw new Error(`Could not UTF-8 decode smart query response from contract: ${error}`);\n                }\n                try {\n                    return JSON.parse(responseText);\n                }\n                catch (error) {\n                    throw new Error(`Could not JSON parse smart query response from contract: ${error}`);\n                }\n            },\n        },\n    };\n}\nexports.setupWasmExtension = setupWasmExtension;\n//# sourceMappingURL=queries.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvc21qcy9jb3Ntd2FzbS1zdGFyZ2F0ZS9idWlsZC9tb2R1bGVzL3dhc20vcXVlcmllcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsbUJBQW1CLG1CQUFPLENBQUMsd0VBQWtCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLHdFQUFrQjtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyxrR0FBcUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsdUVBQXVFLG9CQUFvQjtBQUMzRjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGtDQUFrQztBQUNsQztBQUNBLGFBQWE7QUFDYjtBQUNBLGtDQUFrQztBQUNsQyx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrR0FBa0csTUFBTTtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLE1BQU07QUFDdEc7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvY29zbXdhc20tc3RhcmdhdGUvYnVpbGQvbW9kdWxlcy93YXNtL3F1ZXJpZXMuanM/NTYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0dXBXYXNtRXh0ZW5zaW9uID0gdm9pZCAwO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuY29uc3Qgc3RhcmdhdGVfMSA9IHJlcXVpcmUoXCJAY29zbWpzL3N0YXJnYXRlXCIpO1xuY29uc3QgcXVlcnlfMSA9IHJlcXVpcmUoXCJjb3NtanMtdHlwZXMvY29zbXdhc20vd2FzbS92MS9xdWVyeVwiKTtcbmZ1bmN0aW9uIHNldHVwV2FzbUV4dGVuc2lvbihiYXNlKSB7XG4gICAgY29uc3QgcnBjID0gKDAsIHN0YXJnYXRlXzEuY3JlYXRlUHJvdG9idWZScGNDbGllbnQpKGJhc2UpO1xuICAgIC8vIFVzZSB0aGlzIHNlcnZpY2UgdG8gZ2V0IGVhc3kgdHlwZWQgYWNjZXNzIHRvIHF1ZXJ5IG1ldGhvZHNcbiAgICAvLyBUaGlzIGNhbm5vdCBiZSB1c2VkIGZvciBwcm9vZiB2ZXJpZmljYXRpb25cbiAgICBjb25zdCBxdWVyeVNlcnZpY2UgPSBuZXcgcXVlcnlfMS5RdWVyeUNsaWVudEltcGwocnBjKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3YXNtOiB7XG4gICAgICAgICAgICBsaXN0Q29kZUluZm86IGFzeW5jIChwYWdpbmF0aW9uS2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogKDAsIHN0YXJnYXRlXzEuY3JlYXRlUGFnaW5hdGlvbikocGFnaW5hdGlvbktleSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlTZXJ2aWNlLkNvZGVzKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENvZGU6IGFzeW5jIChpZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBxdWVyeV8xLlF1ZXJ5Q29kZVJlcXVlc3QuZnJvbVBhcnRpYWwoeyBjb2RlSWQ6IEJpZ0ludChpZCkgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5U2VydmljZS5Db2RlKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RDb250cmFjdHNCeUNvZGVJZDogYXN5bmMgKGlkLCBwYWdpbmF0aW9uS2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHF1ZXJ5XzEuUXVlcnlDb250cmFjdHNCeUNvZGVSZXF1ZXN0LmZyb21QYXJ0aWFsKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZUlkOiBCaWdJbnQoaWQpLFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiAoMCwgc3RhcmdhdGVfMS5jcmVhdGVQYWdpbmF0aW9uKShwYWdpbmF0aW9uS2V5KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlTZXJ2aWNlLkNvbnRyYWN0c0J5Q29kZShyZXF1ZXN0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaXN0Q29udHJhY3RzQnlDcmVhdG9yOiBhc3luYyAoY3JlYXRvciwgcGFnaW5hdGlvbktleSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3JBZGRyZXNzOiBjcmVhdG9yLFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiAoMCwgc3RhcmdhdGVfMS5jcmVhdGVQYWdpbmF0aW9uKShwYWdpbmF0aW9uS2V5KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeVNlcnZpY2UuQ29udHJhY3RzQnlDcmVhdG9yKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENvbnRyYWN0SW5mbzogYXN5bmMgKGFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0geyBhZGRyZXNzOiBhZGRyZXNzIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5U2VydmljZS5Db250cmFjdEluZm8ocmVxdWVzdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q29udHJhY3RDb2RlSGlzdG9yeTogYXN5bmMgKGFkZHJlc3MsIHBhZ2luYXRpb25LZXkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiAoMCwgc3RhcmdhdGVfMS5jcmVhdGVQYWdpbmF0aW9uKShwYWdpbmF0aW9uS2V5KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeVNlcnZpY2UuQ29udHJhY3RIaXN0b3J5KHJlcXVlc3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEFsbENvbnRyYWN0U3RhdGU6IGFzeW5jIChhZGRyZXNzLCBwYWdpbmF0aW9uS2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogKDAsIHN0YXJnYXRlXzEuY3JlYXRlUGFnaW5hdGlvbikocGFnaW5hdGlvbktleSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlTZXJ2aWNlLkFsbENvbnRyYWN0U3RhdGUocmVxdWVzdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcXVlcnlDb250cmFjdFJhdzogYXN5bmMgKGFkZHJlc3MsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IGFkZHJlc3M6IGFkZHJlc3MsIHF1ZXJ5RGF0YToga2V5IH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5U2VydmljZS5SYXdDb250cmFjdFN0YXRlKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXJ5Q29udHJhY3RTbWFydDogYXN5bmMgKGFkZHJlc3MsIHF1ZXJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHsgYWRkcmVzczogYWRkcmVzcywgcXVlcnlEYXRhOiAoMCwgZW5jb2RpbmdfMS50b1V0ZjgpKEpTT04uc3RyaW5naWZ5KHF1ZXJ5KSkgfTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHF1ZXJ5U2VydmljZS5TbWFydENvbnRyYWN0U3RhdGUocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgLy8gQnkgY29udmVudGlvbiwgc21hcnQgcXVlcmllcyBtdXN0IHJldHVybiBhIHZhbGlkIEpTT04gZG9jdW1lbnQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vQ29zbVdhc20vY29zbXdhc20vaXNzdWVzLzE0NClcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dCA9ICgwLCBlbmNvZGluZ18xLmZyb21VdGY4KShkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IFVURi04IGRlY29kZSBzbWFydCBxdWVyeSByZXNwb25zZSBmcm9tIGNvbnRyYWN0OiAke2Vycm9yfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgSlNPTiBwYXJzZSBzbWFydCBxdWVyeSByZXNwb25zZSBmcm9tIGNvbnRyYWN0OiAke2Vycm9yfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuc2V0dXBXYXNtRXh0ZW5zaW9uID0gc2V0dXBXYXNtRXh0ZW5zaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcmllcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js\n"));

/***/ }),

/***/ "./node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"./node_modules/@cosmjs/amino/build/index.js\");\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"./node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"./node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"./node_modules/@cosmjs/math/build/index.js\");\nconst proto_signing_1 = __webpack_require__(/*! @cosmjs/proto-signing */ \"./node_modules/@cosmjs/proto-signing/build/index.js\");\nconst stargate_1 = __webpack_require__(/*! @cosmjs/stargate */ \"./node_modules/@cosmjs/stargate/build/index.js\");\nconst tendermint_rpc_1 = __webpack_require__(/*! @cosmjs/tendermint-rpc */ \"./node_modules/@cosmjs/tendermint-rpc/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"./node_modules/@cosmjs/utils/build/index.js\");\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/distribution/v1beta1/tx */ \"./node_modules/cosmjs-types/cosmos/distribution/v1beta1/tx.js\");\nconst tx_2 = __webpack_require__(/*! cosmjs-types/cosmos/staking/v1beta1/tx */ \"./node_modules/cosmjs-types/cosmos/staking/v1beta1/tx.js\");\nconst signing_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/signing/v1beta1/signing */ \"./node_modules/cosmjs-types/cosmos/tx/signing/v1beta1/signing.js\");\nconst tx_3 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"./node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\nconst tx_4 = __webpack_require__(/*! cosmjs-types/cosmwasm/wasm/v1/tx */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/tx.js\");\nconst pako_1 = __importDefault(__webpack_require__(/*! pako */ \"./node_modules/pako/index.js\"));\nconst cosmwasmclient_1 = __webpack_require__(/*! ./cosmwasmclient */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js\");\nconst modules_1 = __webpack_require__(/*! ./modules */ \"./node_modules/@cosmjs/cosmwasm-stargate/build/modules/index.js\");\nfunction createDeliverTxResponseErrorMessage(result) {\n    return `Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;\n}\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n    /**\n     * Creates an instance by connecting to the given CometBFT RPC endpoint.\n     *\n     * This uses auto-detection to decide between a CometBFT 0.38, Tendermint 0.37 and 0.34 client.\n     * To set the Comet client explicitly, use `createWithSigner`.\n     */\n    static async connectWithSigner(endpoint, signer, options = {}) {\n        const cometClient = await (0, tendermint_rpc_1.connectComet)(endpoint);\n        return SigningCosmWasmClient.createWithSigner(cometClient, signer, options);\n    }\n    /**\n     * Creates an instance from a manually created Comet client.\n     * Use this to use `Comet38Client` or `Tendermint37Client` instead of `Tendermint34Client`.\n     */\n    static async createWithSigner(cometClient, signer, options = {}) {\n        return new SigningCosmWasmClient(cometClient, signer, options);\n    }\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n    static async offline(signer, options = {}) {\n        return new SigningCosmWasmClient(undefined, signer, options);\n    }\n    constructor(cometClient, signer, options) {\n        super(cometClient);\n        const { registry = new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, ...modules_1.wasmTypes]), aminoTypes = new stargate_1.AminoTypes({\n            ...(0, stargate_1.createDefaultAminoConverters)(),\n            ...(0, modules_1.createWasmAminoConverters)(),\n        }), } = options;\n        this.registry = registry;\n        this.aminoTypes = aminoTypes;\n        this.signer = signer;\n        this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n        this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n        this.gasPrice = options.gasPrice;\n    }\n    async simulate(signerAddress, messages, memo) {\n        const anyMsgs = messages.map((m) => this.registry.encodeAsAny(m));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n        const { sequence } = await this.getSequence(signerAddress);\n        const { gasInfo } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n        (0, utils_1.assertDefined)(gasInfo);\n        return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n    }\n    /** Uploads code and returns a receipt, including the code ID */\n    async upload(senderAddress, wasmCode, fee, memo = \"\", instantiatePermission) {\n        const compressed = pako_1.default.gzip(wasmCode, { level: 9 });\n        const storeCodeMsg = {\n            typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n            value: tx_4.MsgStoreCode.fromPartial({\n                sender: senderAddress,\n                wasmByteCode: compressed,\n                instantiatePermission,\n            }),\n        };\n        // When uploading a contract, the simulation is only 1-2% away from the actual gas usage.\n        // So we have a smaller default gas multiplier than signAndBroadcast.\n        const usedFee = fee == \"auto\" ? 1.1 : fee;\n        const result = await this.signAndBroadcast(senderAddress, [storeCodeMsg], usedFee, memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n        const codeIdAttr = stargate_1.logs.findAttribute(parsedLogs, \"store_code\", \"code_id\");\n        return {\n            checksum: (0, encoding_1.toHex)((0, crypto_1.sha256)(wasmCode)),\n            originalSize: wasmCode.length,\n            compressedSize: compressed.length,\n            codeId: Number.parseInt(codeIdAttr.value, 10),\n            logs: parsedLogs,\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async instantiate(senderAddress, codeId, msg, label, fee, options = {}) {\n        const instantiateContractMsg = {\n            typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n            value: tx_4.MsgInstantiateContract.fromPartial({\n                sender: senderAddress,\n                codeId: BigInt(new math_1.Uint53(codeId).toString()),\n                label: label,\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n                funds: [...(options.funds || [])],\n                admin: options.admin,\n            }),\n        };\n        const result = await this.signAndBroadcast(senderAddress, [instantiateContractMsg], fee, options.memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n        const contractAddressAttr = stargate_1.logs.findAttribute(parsedLogs, \"instantiate\", \"_contract_address\");\n        return {\n            contractAddress: contractAddressAttr.value,\n            logs: parsedLogs,\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async instantiate2(senderAddress, codeId, salt, msg, label, fee, options = {}) {\n        const instantiateContract2Msg = {\n            typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract2\",\n            value: tx_4.MsgInstantiateContract2.fromPartial({\n                sender: senderAddress,\n                codeId: BigInt(new math_1.Uint53(codeId).toString()),\n                label: label,\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n                funds: [...(options.funds || [])],\n                admin: options.admin,\n                salt: salt,\n                fixMsg: false,\n            }),\n        };\n        const result = await this.signAndBroadcast(senderAddress, [instantiateContract2Msg], fee, options.memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n        const contractAddressAttr = stargate_1.logs.findAttribute(parsedLogs, \"instantiate\", \"_contract_address\");\n        return {\n            contractAddress: contractAddressAttr.value,\n            logs: parsedLogs,\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async updateAdmin(senderAddress, contractAddress, newAdmin, fee, memo = \"\") {\n        const updateAdminMsg = {\n            typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n            value: tx_4.MsgUpdateAdmin.fromPartial({\n                sender: senderAddress,\n                contract: contractAddress,\n                newAdmin: newAdmin,\n            }),\n        };\n        const result = await this.signAndBroadcast(senderAddress, [updateAdminMsg], fee, memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        return {\n            logs: stargate_1.logs.parseRawLog(result.rawLog),\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async clearAdmin(senderAddress, contractAddress, fee, memo = \"\") {\n        const clearAdminMsg = {\n            typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n            value: tx_4.MsgClearAdmin.fromPartial({\n                sender: senderAddress,\n                contract: contractAddress,\n            }),\n        };\n        const result = await this.signAndBroadcast(senderAddress, [clearAdminMsg], fee, memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        return {\n            logs: stargate_1.logs.parseRawLog(result.rawLog),\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async migrate(senderAddress, contractAddress, codeId, migrateMsg, fee, memo = \"\") {\n        const migrateContractMsg = {\n            typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n            value: tx_4.MsgMigrateContract.fromPartial({\n                sender: senderAddress,\n                contract: contractAddress,\n                codeId: BigInt(new math_1.Uint53(codeId).toString()),\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(migrateMsg)),\n            }),\n        };\n        const result = await this.signAndBroadcast(senderAddress, [migrateContractMsg], fee, memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        return {\n            logs: stargate_1.logs.parseRawLog(result.rawLog),\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async execute(senderAddress, contractAddress, msg, fee, memo = \"\", funds) {\n        const instruction = {\n            contractAddress: contractAddress,\n            msg: msg,\n            funds: funds,\n        };\n        return this.executeMultiple(senderAddress, [instruction], fee, memo);\n    }\n    /**\n     * Like `execute` but allows executing multiple messages in one transaction.\n     */\n    async executeMultiple(senderAddress, instructions, fee, memo = \"\") {\n        const msgs = instructions.map((i) => ({\n            typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n            value: tx_4.MsgExecuteContract.fromPartial({\n                sender: senderAddress,\n                contract: i.contractAddress,\n                msg: (0, encoding_1.toUtf8)(JSON.stringify(i.msg)),\n                funds: [...(i.funds || [])],\n            }),\n        }));\n        const result = await this.signAndBroadcast(senderAddress, msgs, fee, memo);\n        if ((0, stargate_1.isDeliverTxFailure)(result)) {\n            throw new Error(createDeliverTxResponseErrorMessage(result));\n        }\n        return {\n            logs: stargate_1.logs.parseRawLog(result.rawLog),\n            height: result.height,\n            transactionHash: result.transactionHash,\n            events: result.events,\n            gasWanted: result.gasWanted,\n            gasUsed: result.gasUsed,\n        };\n    }\n    async sendTokens(senderAddress, recipientAddress, amount, fee, memo = \"\") {\n        const sendMsg = {\n            typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n            value: {\n                fromAddress: senderAddress,\n                toAddress: recipientAddress,\n                amount: [...amount],\n            },\n        };\n        return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n    }\n    async delegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n        const delegateMsg = {\n            typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n            value: tx_2.MsgDelegate.fromPartial({ delegatorAddress: delegatorAddress, validatorAddress, amount }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n    }\n    async undelegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n        const undelegateMsg = {\n            typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n            value: tx_2.MsgUndelegate.fromPartial({ delegatorAddress: delegatorAddress, validatorAddress, amount }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n    }\n    async withdrawRewards(delegatorAddress, validatorAddress, fee, memo = \"\") {\n        const withdrawDelegatorRewardMsg = {\n            typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n            value: tx_1.MsgWithdrawDelegatorReward.fromPartial({ delegatorAddress: delegatorAddress, validatorAddress }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [withdrawDelegatorRewardMsg], fee, memo);\n    }\n    /**\n     * Creates a transaction with the given messages, fee, memo and timeout height. Then signs and broadcasts the transaction.\n     *\n     * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.\n     * @param messages\n     * @param fee\n     * @param memo\n     * @param timeoutHeight (optional) timeout height to prevent the tx from being committed past a certain height\n     */\n    async signAndBroadcast(signerAddress, messages, fee, memo = \"\", timeoutHeight) {\n        let usedFee;\n        if (fee == \"auto\" || typeof fee === \"number\") {\n            (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n            const gasEstimation = await this.simulate(signerAddress, messages, memo);\n            // Starting with Cosmos SDK 0.47, we see many cases in which 1.3 is not enough anymore\n            // E.g. https://github.com/cosmos/cosmos-sdk/issues/16020\n            const multiplier = typeof fee === \"number\" ? fee : 1.4;\n            usedFee = (0, stargate_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n        }\n        else {\n            usedFee = fee;\n        }\n        const txRaw = await this.sign(signerAddress, messages, usedFee, memo, undefined, timeoutHeight);\n        const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n        return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n    }\n    /**\n     * Creates a transaction with the given messages, fee, memo and timeout height. Then signs and broadcasts the transaction.\n     *\n     * This method is useful if you want to send a transaction in broadcast,\n     * without waiting for it to be placed inside a block, because for example\n     * I would like to receive the hash to later track the transaction with another tool.\n     *\n     * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.\n     * @param messages\n     * @param fee\n     * @param memo\n     * @param timeoutHeight (optional) timeout height to prevent the tx from being committed past a certain height\n     *\n     * @returns Returns the hash of the transaction\n     */\n    async signAndBroadcastSync(signerAddress, messages, fee, memo = \"\", timeoutHeight) {\n        let usedFee;\n        if (fee == \"auto\" || typeof fee === \"number\") {\n            (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n            const gasEstimation = await this.simulate(signerAddress, messages, memo);\n            const multiplier = typeof fee === \"number\" ? fee : 1.3;\n            usedFee = (0, stargate_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n        }\n        else {\n            usedFee = fee;\n        }\n        const txRaw = await this.sign(signerAddress, messages, usedFee, memo, undefined, timeoutHeight);\n        const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n        return this.broadcastTxSync(txBytes);\n    }\n    async sign(signerAddress, messages, fee, memo, explicitSignerData, timeoutHeight) {\n        let signerData;\n        if (explicitSignerData) {\n            signerData = explicitSignerData;\n        }\n        else {\n            const { accountNumber, sequence } = await this.getSequence(signerAddress);\n            const chainId = await this.getChainId();\n            signerData = {\n                accountNumber: accountNumber,\n                sequence: sequence,\n                chainId: chainId,\n            };\n        }\n        return (0, proto_signing_1.isOfflineDirectSigner)(this.signer)\n            ? this.signDirect(signerAddress, messages, fee, memo, signerData, timeoutHeight)\n            : this.signAmino(signerAddress, messages, fee, memo, signerData, timeoutHeight);\n    }\n    async signAmino(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }, timeoutHeight) {\n        (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n        const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n        const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));\n        const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence, timeoutHeight);\n        const { signature, signed } = await this.signer.signAmino(signerAddress, signDoc);\n        const signedTxBody = {\n            typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n            value: {\n                messages: signed.msgs.map((msg) => this.aminoTypes.fromAmino(msg)),\n                memo: signed.memo,\n                timeoutHeight: timeoutHeight,\n            },\n        };\n        const signedTxBodyBytes = this.registry.encode(signedTxBody);\n        const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n        const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n        const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: signedSequence }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);\n        return tx_3.TxRaw.fromPartial({\n            bodyBytes: signedTxBodyBytes,\n            authInfoBytes: signedAuthInfoBytes,\n            signatures: [(0, encoding_1.fromBase64)(signature.signature)],\n        });\n    }\n    async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }, timeoutHeight) {\n        (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n        const txBody = {\n            typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n            value: {\n                messages: messages,\n                memo: memo,\n                timeoutHeight: timeoutHeight,\n            },\n        };\n        const txBodyBytes = this.registry.encode(txBody);\n        const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n        const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], fee.amount, gasLimit, fee.granter, fee.payer);\n        const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n        const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc);\n        return tx_3.TxRaw.fromPartial({\n            bodyBytes: signed.bodyBytes,\n            authInfoBytes: signed.authInfoBytes,\n            signatures: [(0, encoding_1.fromBase64)(signature.signature)],\n        });\n    }\n}\nexports.SigningCosmWasmClient = SigningCosmWasmClient;\n//# sourceMappingURL=signingcosmwasmclient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js\n"));

/***/ }),

/***/ "./node_modules/cosmjs-types/cosmwasm/wasm/v1/query.js":
/*!*************************************************************!*\
  !*** ./node_modules/cosmjs-types/cosmwasm/wasm/v1/query.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryClientImpl = exports.QueryContractsByCreatorResponse = exports.QueryContractsByCreatorRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryPinnedCodesResponse = exports.QueryPinnedCodesRequest = exports.QueryCodesResponse = exports.QueryCodesRequest = exports.QueryCodeResponse = exports.CodeInfoResponse = exports.QueryCodeRequest = exports.QuerySmartContractStateResponse = exports.QuerySmartContractStateRequest = exports.QueryRawContractStateResponse = exports.QueryRawContractStateRequest = exports.QueryAllContractStateResponse = exports.QueryAllContractStateRequest = exports.QueryContractsByCodeResponse = exports.QueryContractsByCodeRequest = exports.QueryContractHistoryResponse = exports.QueryContractHistoryRequest = exports.QueryContractInfoResponse = exports.QueryContractInfoRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst pagination_1 = __webpack_require__(/*! ../../../cosmos/base/query/v1beta1/pagination */ \"./node_modules/cosmjs-types/cosmos/base/query/v1beta1/pagination.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js\");\nconst binary_1 = __webpack_require__(/*! ../../../binary */ \"./node_modules/cosmjs-types/binary.js\");\nconst helpers_1 = __webpack_require__(/*! ../../../helpers */ \"./node_modules/cosmjs-types/helpers.js\");\nexports.protobufPackage = \"cosmwasm.wasm.v1\";\nfunction createBaseQueryContractInfoRequest() {\n    return {\n        address: \"\",\n    };\n}\nexports.QueryContractInfoRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractInfoRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractInfoRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractInfoRequest();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractInfoRequest();\n        message.address = object.address ?? \"\";\n        return message;\n    },\n};\nfunction createBaseQueryContractInfoResponse() {\n    return {\n        address: \"\",\n        contractInfo: types_1.ContractInfo.fromPartial({}),\n    };\n}\nexports.QueryContractInfoResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractInfoResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.contractInfo !== undefined) {\n            types_1.ContractInfo.encode(message.contractInfo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractInfoResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.contractInfo = types_1.ContractInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractInfoResponse();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.contractInfo))\n            obj.contractInfo = types_1.ContractInfo.fromJSON(object.contractInfo);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.contractInfo !== undefined &&\n            (obj.contractInfo = message.contractInfo ? types_1.ContractInfo.toJSON(message.contractInfo) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractInfoResponse();\n        message.address = object.address ?? \"\";\n        if (object.contractInfo !== undefined && object.contractInfo !== null) {\n            message.contractInfo = types_1.ContractInfo.fromPartial(object.contractInfo);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryContractHistoryRequest() {\n    return {\n        address: \"\",\n        pagination: undefined,\n    };\n}\nexports.QueryContractHistoryRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractHistoryRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractHistoryRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractHistoryRequest();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractHistoryRequest();\n        message.address = object.address ?? \"\";\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryContractHistoryResponse() {\n    return {\n        entries: [],\n        pagination: undefined,\n    };\n}\nexports.QueryContractHistoryResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractHistoryResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.entries) {\n            types_1.ContractCodeHistoryEntry.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractHistoryResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.entries.push(types_1.ContractCodeHistoryEntry.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractHistoryResponse();\n        if (Array.isArray(object?.entries))\n            obj.entries = object.entries.map((e) => types_1.ContractCodeHistoryEntry.fromJSON(e));\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.entries) {\n            obj.entries = message.entries.map((e) => (e ? types_1.ContractCodeHistoryEntry.toJSON(e) : undefined));\n        }\n        else {\n            obj.entries = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractHistoryResponse();\n        message.entries = object.entries?.map((e) => types_1.ContractCodeHistoryEntry.fromPartial(e)) || [];\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryContractsByCodeRequest() {\n    return {\n        codeId: BigInt(0),\n        pagination: undefined,\n    };\n}\nexports.QueryContractsByCodeRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractsByCodeRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractsByCodeRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractsByCodeRequest();\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractsByCodeRequest();\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryContractsByCodeResponse() {\n    return {\n        contracts: [],\n        pagination: undefined,\n    };\n}\nexports.QueryContractsByCodeResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractsByCodeResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.contracts) {\n            writer.uint32(10).string(v);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractsByCodeResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.contracts.push(reader.string());\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractsByCodeResponse();\n        if (Array.isArray(object?.contracts))\n            obj.contracts = object.contracts.map((e) => String(e));\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.contracts) {\n            obj.contracts = message.contracts.map((e) => e);\n        }\n        else {\n            obj.contracts = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractsByCodeResponse();\n        message.contracts = object.contracts?.map((e) => e) || [];\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryAllContractStateRequest() {\n    return {\n        address: \"\",\n        pagination: undefined,\n    };\n}\nexports.QueryAllContractStateRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryAllContractStateRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryAllContractStateRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryAllContractStateRequest();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryAllContractStateRequest();\n        message.address = object.address ?? \"\";\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryAllContractStateResponse() {\n    return {\n        models: [],\n        pagination: undefined,\n    };\n}\nexports.QueryAllContractStateResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryAllContractStateResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.models) {\n            types_1.Model.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryAllContractStateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.models.push(types_1.Model.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryAllContractStateResponse();\n        if (Array.isArray(object?.models))\n            obj.models = object.models.map((e) => types_1.Model.fromJSON(e));\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.models) {\n            obj.models = message.models.map((e) => (e ? types_1.Model.toJSON(e) : undefined));\n        }\n        else {\n            obj.models = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryAllContractStateResponse();\n        message.models = object.models?.map((e) => types_1.Model.fromPartial(e)) || [];\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryRawContractStateRequest() {\n    return {\n        address: \"\",\n        queryData: new Uint8Array(),\n    };\n}\nexports.QueryRawContractStateRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryRawContractStateRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.queryData.length !== 0) {\n            writer.uint32(18).bytes(message.queryData);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryRawContractStateRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.queryData = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryRawContractStateRequest();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.queryData))\n            obj.queryData = (0, helpers_1.bytesFromBase64)(object.queryData);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.queryData !== undefined &&\n            (obj.queryData = (0, helpers_1.base64FromBytes)(message.queryData !== undefined ? message.queryData : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryRawContractStateRequest();\n        message.address = object.address ?? \"\";\n        message.queryData = object.queryData ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseQueryRawContractStateResponse() {\n    return {\n        data: new Uint8Array(),\n    };\n}\nexports.QueryRawContractStateResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryRawContractStateResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryRawContractStateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryRawContractStateResponse();\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryRawContractStateResponse();\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseQuerySmartContractStateRequest() {\n    return {\n        address: \"\",\n        queryData: new Uint8Array(),\n    };\n}\nexports.QuerySmartContractStateRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QuerySmartContractStateRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.queryData.length !== 0) {\n            writer.uint32(18).bytes(message.queryData);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQuerySmartContractStateRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.queryData = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQuerySmartContractStateRequest();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.queryData))\n            obj.queryData = (0, helpers_1.bytesFromBase64)(object.queryData);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.queryData !== undefined &&\n            (obj.queryData = (0, helpers_1.base64FromBytes)(message.queryData !== undefined ? message.queryData : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQuerySmartContractStateRequest();\n        message.address = object.address ?? \"\";\n        message.queryData = object.queryData ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseQuerySmartContractStateResponse() {\n    return {\n        data: new Uint8Array(),\n    };\n}\nexports.QuerySmartContractStateResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QuerySmartContractStateResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQuerySmartContractStateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQuerySmartContractStateResponse();\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQuerySmartContractStateResponse();\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseQueryCodeRequest() {\n    return {\n        codeId: BigInt(0),\n    };\n}\nexports.QueryCodeRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryCodeRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryCodeRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryCodeRequest();\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryCodeRequest();\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        return message;\n    },\n};\nfunction createBaseCodeInfoResponse() {\n    return {\n        codeId: BigInt(0),\n        creator: \"\",\n        dataHash: new Uint8Array(),\n        instantiatePermission: types_1.AccessConfig.fromPartial({}),\n    };\n}\nexports.CodeInfoResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.CodeInfoResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.dataHash.length !== 0) {\n            writer.uint32(26).bytes(message.dataHash);\n        }\n        if (message.instantiatePermission !== undefined) {\n            types_1.AccessConfig.encode(message.instantiatePermission, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodeInfoResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 3:\n                    message.dataHash = reader.bytes();\n                    break;\n                case 6:\n                    message.instantiatePermission = types_1.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseCodeInfoResponse();\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.creator))\n            obj.creator = String(object.creator);\n        if ((0, helpers_1.isSet)(object.dataHash))\n            obj.dataHash = (0, helpers_1.bytesFromBase64)(object.dataHash);\n        if ((0, helpers_1.isSet)(object.instantiatePermission))\n            obj.instantiatePermission = types_1.AccessConfig.fromJSON(object.instantiatePermission);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.creator !== undefined && (obj.creator = message.creator);\n        message.dataHash !== undefined &&\n            (obj.dataHash = (0, helpers_1.base64FromBytes)(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n        message.instantiatePermission !== undefined &&\n            (obj.instantiatePermission = message.instantiatePermission\n                ? types_1.AccessConfig.toJSON(message.instantiatePermission)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCodeInfoResponse();\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        message.creator = object.creator ?? \"\";\n        message.dataHash = object.dataHash ?? new Uint8Array();\n        if (object.instantiatePermission !== undefined && object.instantiatePermission !== null) {\n            message.instantiatePermission = types_1.AccessConfig.fromPartial(object.instantiatePermission);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryCodeResponse() {\n    return {\n        codeInfo: undefined,\n        data: new Uint8Array(),\n    };\n}\nexports.QueryCodeResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryCodeResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeInfo !== undefined) {\n            exports.CodeInfoResponse.encode(message.codeInfo, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryCodeResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeInfo = exports.CodeInfoResponse.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryCodeResponse();\n        if ((0, helpers_1.isSet)(object.codeInfo))\n            obj.codeInfo = exports.CodeInfoResponse.fromJSON(object.codeInfo);\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeInfo !== undefined &&\n            (obj.codeInfo = message.codeInfo ? exports.CodeInfoResponse.toJSON(message.codeInfo) : undefined);\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryCodeResponse();\n        if (object.codeInfo !== undefined && object.codeInfo !== null) {\n            message.codeInfo = exports.CodeInfoResponse.fromPartial(object.codeInfo);\n        }\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseQueryCodesRequest() {\n    return {\n        pagination: undefined,\n    };\n}\nexports.QueryCodesRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryCodesRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryCodesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryCodesRequest();\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryCodesRequest();\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryCodesResponse() {\n    return {\n        codeInfos: [],\n        pagination: undefined,\n    };\n}\nexports.QueryCodesResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryCodesResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.codeInfos) {\n            exports.CodeInfoResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryCodesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeInfos.push(exports.CodeInfoResponse.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryCodesResponse();\n        if (Array.isArray(object?.codeInfos))\n            obj.codeInfos = object.codeInfos.map((e) => exports.CodeInfoResponse.fromJSON(e));\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.codeInfos) {\n            obj.codeInfos = message.codeInfos.map((e) => (e ? exports.CodeInfoResponse.toJSON(e) : undefined));\n        }\n        else {\n            obj.codeInfos = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryCodesResponse();\n        message.codeInfos = object.codeInfos?.map((e) => exports.CodeInfoResponse.fromPartial(e)) || [];\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryPinnedCodesRequest() {\n    return {\n        pagination: undefined,\n    };\n}\nexports.QueryPinnedCodesRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryPinnedCodesRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryPinnedCodesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryPinnedCodesRequest();\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryPinnedCodesRequest();\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryPinnedCodesResponse() {\n    return {\n        codeIds: [],\n        pagination: undefined,\n    };\n}\nexports.QueryPinnedCodesResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryPinnedCodesResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.codeIds) {\n            writer.uint64(v);\n        }\n        writer.ldelim();\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryPinnedCodesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.codeIds.push(reader.uint64());\n                        }\n                    }\n                    else {\n                        message.codeIds.push(reader.uint64());\n                    }\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryPinnedCodesResponse();\n        if (Array.isArray(object?.codeIds))\n            obj.codeIds = object.codeIds.map((e) => BigInt(e.toString()));\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.codeIds) {\n            obj.codeIds = message.codeIds.map((e) => (e || BigInt(0)).toString());\n        }\n        else {\n            obj.codeIds = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryPinnedCodesResponse();\n        message.codeIds = object.codeIds?.map((e) => BigInt(e.toString())) || [];\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryParamsRequest() {\n    return {};\n}\nexports.QueryParamsRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryParamsRequest\",\n    encode(_, writer = binary_1.BinaryWriter.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryParamsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const obj = createBaseQueryParamsRequest();\n        return obj;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseQueryParamsRequest();\n        return message;\n    },\n};\nfunction createBaseQueryParamsResponse() {\n    return {\n        params: types_1.Params.fromPartial({}),\n    };\n}\nexports.QueryParamsResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryParamsResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.params !== undefined) {\n            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryParamsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.params = types_1.Params.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryParamsResponse();\n        if ((0, helpers_1.isSet)(object.params))\n            obj.params = types_1.Params.fromJSON(object.params);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.params !== undefined && (obj.params = message.params ? types_1.Params.toJSON(message.params) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryParamsResponse();\n        if (object.params !== undefined && object.params !== null) {\n            message.params = types_1.Params.fromPartial(object.params);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryContractsByCreatorRequest() {\n    return {\n        creatorAddress: \"\",\n        pagination: undefined,\n    };\n}\nexports.QueryContractsByCreatorRequest = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractsByCreatorRequest\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.creatorAddress !== \"\") {\n            writer.uint32(10).string(message.creatorAddress);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractsByCreatorRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.creatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractsByCreatorRequest();\n        if ((0, helpers_1.isSet)(object.creatorAddress))\n            obj.creatorAddress = String(object.creatorAddress);\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.creatorAddress !== undefined && (obj.creatorAddress = message.creatorAddress);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractsByCreatorRequest();\n        message.creatorAddress = object.creatorAddress ?? \"\";\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nfunction createBaseQueryContractsByCreatorResponse() {\n    return {\n        contractAddresses: [],\n        pagination: undefined,\n    };\n}\nexports.QueryContractsByCreatorResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.QueryContractsByCreatorResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.contractAddresses) {\n            writer.uint32(10).string(v);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryContractsByCreatorResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.contractAddresses.push(reader.string());\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseQueryContractsByCreatorResponse();\n        if (Array.isArray(object?.contractAddresses))\n            obj.contractAddresses = object.contractAddresses.map((e) => String(e));\n        if ((0, helpers_1.isSet)(object.pagination))\n            obj.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.contractAddresses) {\n            obj.contractAddresses = message.contractAddresses.map((e) => e);\n        }\n        else {\n            obj.contractAddresses = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseQueryContractsByCreatorResponse();\n        message.contractAddresses = object.contractAddresses?.map((e) => e) || [];\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        return message;\n    },\n};\nclass QueryClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.ContractInfo = this.ContractInfo.bind(this);\n        this.ContractHistory = this.ContractHistory.bind(this);\n        this.ContractsByCode = this.ContractsByCode.bind(this);\n        this.AllContractState = this.AllContractState.bind(this);\n        this.RawContractState = this.RawContractState.bind(this);\n        this.SmartContractState = this.SmartContractState.bind(this);\n        this.Code = this.Code.bind(this);\n        this.Codes = this.Codes.bind(this);\n        this.PinnedCodes = this.PinnedCodes.bind(this);\n        this.Params = this.Params.bind(this);\n        this.ContractsByCreator = this.ContractsByCreator.bind(this);\n    }\n    ContractInfo(request) {\n        const data = exports.QueryContractInfoRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"ContractInfo\", data);\n        return promise.then((data) => exports.QueryContractInfoResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    ContractHistory(request) {\n        const data = exports.QueryContractHistoryRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"ContractHistory\", data);\n        return promise.then((data) => exports.QueryContractHistoryResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    ContractsByCode(request) {\n        const data = exports.QueryContractsByCodeRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"ContractsByCode\", data);\n        return promise.then((data) => exports.QueryContractsByCodeResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    AllContractState(request) {\n        const data = exports.QueryAllContractStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"AllContractState\", data);\n        return promise.then((data) => exports.QueryAllContractStateResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    RawContractState(request) {\n        const data = exports.QueryRawContractStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"RawContractState\", data);\n        return promise.then((data) => exports.QueryRawContractStateResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    SmartContractState(request) {\n        const data = exports.QuerySmartContractStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"SmartContractState\", data);\n        return promise.then((data) => exports.QuerySmartContractStateResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    Code(request) {\n        const data = exports.QueryCodeRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"Code\", data);\n        return promise.then((data) => exports.QueryCodeResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    Codes(request = {\n        pagination: pagination_1.PageRequest.fromPartial({}),\n    }) {\n        const data = exports.QueryCodesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"Codes\", data);\n        return promise.then((data) => exports.QueryCodesResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    PinnedCodes(request = {\n        pagination: pagination_1.PageRequest.fromPartial({}),\n    }) {\n        const data = exports.QueryPinnedCodesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"PinnedCodes\", data);\n        return promise.then((data) => exports.QueryPinnedCodesResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    Params(request = {}) {\n        const data = exports.QueryParamsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"Params\", data);\n        return promise.then((data) => exports.QueryParamsResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    ContractsByCreator(request) {\n        const data = exports.QueryContractsByCreatorRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Query\", \"ContractsByCreator\", data);\n        return promise.then((data) => exports.QueryContractsByCreatorResponse.decode(new binary_1.BinaryReader(data)));\n    }\n}\nexports.QueryClientImpl = QueryClientImpl;\n//# sourceMappingURL=query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cosmjs-types/cosmwasm/wasm/v1/query.js\n"));

/***/ }),

/***/ "./node_modules/cosmjs-types/cosmwasm/wasm/v1/tx.js":
/*!**********************************************************!*\
  !*** ./node_modules/cosmjs-types/cosmwasm/wasm/v1/tx.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgClientImpl = exports.MsgUpdateInstantiateConfigResponse = exports.MsgUpdateInstantiateConfig = exports.MsgClearAdminResponse = exports.MsgClearAdmin = exports.MsgUpdateAdminResponse = exports.MsgUpdateAdmin = exports.MsgMigrateContractResponse = exports.MsgMigrateContract = exports.MsgExecuteContractResponse = exports.MsgExecuteContract = exports.MsgInstantiateContract2Response = exports.MsgInstantiateContractResponse = exports.MsgInstantiateContract2 = exports.MsgInstantiateContract = exports.MsgStoreCodeResponse = exports.MsgStoreCode = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"./node_modules/cosmjs-types/cosmos/base/v1beta1/coin.js\");\nconst binary_1 = __webpack_require__(/*! ../../../binary */ \"./node_modules/cosmjs-types/binary.js\");\nconst helpers_1 = __webpack_require__(/*! ../../../helpers */ \"./node_modules/cosmjs-types/helpers.js\");\nexports.protobufPackage = \"cosmwasm.wasm.v1\";\nfunction createBaseMsgStoreCode() {\n    return {\n        sender: \"\",\n        wasmByteCode: new Uint8Array(),\n        instantiatePermission: undefined,\n    };\n}\nexports.MsgStoreCode = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.wasmByteCode.length !== 0) {\n            writer.uint32(18).bytes(message.wasmByteCode);\n        }\n        if (message.instantiatePermission !== undefined) {\n            types_1.AccessConfig.encode(message.instantiatePermission, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgStoreCode();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.wasmByteCode = reader.bytes();\n                    break;\n                case 5:\n                    message.instantiatePermission = types_1.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgStoreCode();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.wasmByteCode))\n            obj.wasmByteCode = (0, helpers_1.bytesFromBase64)(object.wasmByteCode);\n        if ((0, helpers_1.isSet)(object.instantiatePermission))\n            obj.instantiatePermission = types_1.AccessConfig.fromJSON(object.instantiatePermission);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.wasmByteCode !== undefined &&\n            (obj.wasmByteCode = (0, helpers_1.base64FromBytes)(message.wasmByteCode !== undefined ? message.wasmByteCode : new Uint8Array()));\n        message.instantiatePermission !== undefined &&\n            (obj.instantiatePermission = message.instantiatePermission\n                ? types_1.AccessConfig.toJSON(message.instantiatePermission)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgStoreCode();\n        message.sender = object.sender ?? \"\";\n        message.wasmByteCode = object.wasmByteCode ?? new Uint8Array();\n        if (object.instantiatePermission !== undefined && object.instantiatePermission !== null) {\n            message.instantiatePermission = types_1.AccessConfig.fromPartial(object.instantiatePermission);\n        }\n        return message;\n    },\n};\nfunction createBaseMsgStoreCodeResponse() {\n    return {\n        codeId: BigInt(0),\n        checksum: new Uint8Array(),\n    };\n}\nexports.MsgStoreCodeResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCodeResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.checksum.length !== 0) {\n            writer.uint32(18).bytes(message.checksum);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgStoreCodeResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.checksum = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgStoreCodeResponse();\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.checksum))\n            obj.checksum = (0, helpers_1.bytesFromBase64)(object.checksum);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.checksum !== undefined &&\n            (obj.checksum = (0, helpers_1.base64FromBytes)(message.checksum !== undefined ? message.checksum : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgStoreCodeResponse();\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        message.checksum = object.checksum ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgInstantiateContract() {\n    return {\n        sender: \"\",\n        admin: \"\",\n        codeId: BigInt(0),\n        label: \"\",\n        msg: new Uint8Array(),\n        funds: [],\n    };\n}\nexports.MsgInstantiateContract = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(18).string(message.admin);\n        }\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(42).bytes(message.msg);\n        }\n        for (const v of message.funds) {\n            coin_1.Coin.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.admin = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.msg = reader.bytes();\n                    break;\n                case 6:\n                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgInstantiateContract();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.admin))\n            obj.admin = String(object.admin);\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.label))\n            obj.label = String(object.label);\n        if ((0, helpers_1.isSet)(object.msg))\n            obj.msg = (0, helpers_1.bytesFromBase64)(object.msg);\n        if (Array.isArray(object?.funds))\n            obj.funds = object.funds.map((e) => coin_1.Coin.fromJSON(e));\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.label !== undefined && (obj.label = message.label);\n        message.msg !== undefined &&\n            (obj.msg = (0, helpers_1.base64FromBytes)(message.msg !== undefined ? message.msg : new Uint8Array()));\n        if (message.funds) {\n            obj.funds = message.funds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.funds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgInstantiateContract();\n        message.sender = object.sender ?? \"\";\n        message.admin = object.admin ?? \"\";\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        message.label = object.label ?? \"\";\n        message.msg = object.msg ?? new Uint8Array();\n        message.funds = object.funds?.map((e) => coin_1.Coin.fromPartial(e)) || [];\n        return message;\n    },\n};\nfunction createBaseMsgInstantiateContract2() {\n    return {\n        sender: \"\",\n        admin: \"\",\n        codeId: BigInt(0),\n        label: \"\",\n        msg: new Uint8Array(),\n        funds: [],\n        salt: new Uint8Array(),\n        fixMsg: false,\n    };\n}\nexports.MsgInstantiateContract2 = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract2\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(18).string(message.admin);\n        }\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(42).bytes(message.msg);\n        }\n        for (const v of message.funds) {\n            coin_1.Coin.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.salt.length !== 0) {\n            writer.uint32(58).bytes(message.salt);\n        }\n        if (message.fixMsg === true) {\n            writer.uint32(64).bool(message.fixMsg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.admin = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.msg = reader.bytes();\n                    break;\n                case 6:\n                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.salt = reader.bytes();\n                    break;\n                case 8:\n                    message.fixMsg = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgInstantiateContract2();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.admin))\n            obj.admin = String(object.admin);\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.label))\n            obj.label = String(object.label);\n        if ((0, helpers_1.isSet)(object.msg))\n            obj.msg = (0, helpers_1.bytesFromBase64)(object.msg);\n        if (Array.isArray(object?.funds))\n            obj.funds = object.funds.map((e) => coin_1.Coin.fromJSON(e));\n        if ((0, helpers_1.isSet)(object.salt))\n            obj.salt = (0, helpers_1.bytesFromBase64)(object.salt);\n        if ((0, helpers_1.isSet)(object.fixMsg))\n            obj.fixMsg = Boolean(object.fixMsg);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.label !== undefined && (obj.label = message.label);\n        message.msg !== undefined &&\n            (obj.msg = (0, helpers_1.base64FromBytes)(message.msg !== undefined ? message.msg : new Uint8Array()));\n        if (message.funds) {\n            obj.funds = message.funds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.funds = [];\n        }\n        message.salt !== undefined &&\n            (obj.salt = (0, helpers_1.base64FromBytes)(message.salt !== undefined ? message.salt : new Uint8Array()));\n        message.fixMsg !== undefined && (obj.fixMsg = message.fixMsg);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgInstantiateContract2();\n        message.sender = object.sender ?? \"\";\n        message.admin = object.admin ?? \"\";\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        message.label = object.label ?? \"\";\n        message.msg = object.msg ?? new Uint8Array();\n        message.funds = object.funds?.map((e) => coin_1.Coin.fromPartial(e)) || [];\n        message.salt = object.salt ?? new Uint8Array();\n        message.fixMsg = object.fixMsg ?? false;\n        return message;\n    },\n};\nfunction createBaseMsgInstantiateContractResponse() {\n    return {\n        address: \"\",\n        data: new Uint8Array(),\n    };\n}\nexports.MsgInstantiateContractResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContractResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContractResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgInstantiateContractResponse();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgInstantiateContractResponse();\n        message.address = object.address ?? \"\";\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgInstantiateContract2Response() {\n    return {\n        address: \"\",\n        data: new Uint8Array(),\n    };\n}\nexports.MsgInstantiateContract2Response = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract2Response\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract2Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgInstantiateContract2Response();\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgInstantiateContract2Response();\n        message.address = object.address ?? \"\";\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgExecuteContract() {\n    return {\n        sender: \"\",\n        contract: \"\",\n        msg: new Uint8Array(),\n        funds: [],\n    };\n}\nexports.MsgExecuteContract = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(26).bytes(message.msg);\n        }\n        for (const v of message.funds) {\n            coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecuteContract();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.msg = reader.bytes();\n                    break;\n                case 5:\n                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgExecuteContract();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.contract))\n            obj.contract = String(object.contract);\n        if ((0, helpers_1.isSet)(object.msg))\n            obj.msg = (0, helpers_1.bytesFromBase64)(object.msg);\n        if (Array.isArray(object?.funds))\n            obj.funds = object.funds.map((e) => coin_1.Coin.fromJSON(e));\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        message.msg !== undefined &&\n            (obj.msg = (0, helpers_1.base64FromBytes)(message.msg !== undefined ? message.msg : new Uint8Array()));\n        if (message.funds) {\n            obj.funds = message.funds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.funds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgExecuteContract();\n        message.sender = object.sender ?? \"\";\n        message.contract = object.contract ?? \"\";\n        message.msg = object.msg ?? new Uint8Array();\n        message.funds = object.funds?.map((e) => coin_1.Coin.fromPartial(e)) || [];\n        return message;\n    },\n};\nfunction createBaseMsgExecuteContractResponse() {\n    return {\n        data: new Uint8Array(),\n    };\n}\nexports.MsgExecuteContractResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContractResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecuteContractResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgExecuteContractResponse();\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgExecuteContractResponse();\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgMigrateContract() {\n    return {\n        sender: \"\",\n        contract: \"\",\n        codeId: BigInt(0),\n        msg: new Uint8Array(),\n    };\n}\nexports.MsgMigrateContract = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(34).bytes(message.msg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMigrateContract();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.msg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgMigrateContract();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.contract))\n            obj.contract = String(object.contract);\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.msg))\n            obj.msg = (0, helpers_1.bytesFromBase64)(object.msg);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.msg !== undefined &&\n            (obj.msg = (0, helpers_1.base64FromBytes)(message.msg !== undefined ? message.msg : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgMigrateContract();\n        message.sender = object.sender ?? \"\";\n        message.contract = object.contract ?? \"\";\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        message.msg = object.msg ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgMigrateContractResponse() {\n    return {\n        data: new Uint8Array(),\n    };\n}\nexports.MsgMigrateContractResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContractResponse\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMigrateContractResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgMigrateContractResponse();\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = (0, helpers_1.bytesFromBase64)(object.data);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgMigrateContractResponse();\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgUpdateAdmin() {\n    return {\n        sender: \"\",\n        newAdmin: \"\",\n        contract: \"\",\n    };\n}\nexports.MsgUpdateAdmin = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.newAdmin !== \"\") {\n            writer.uint32(18).string(message.newAdmin);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateAdmin();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.newAdmin = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgUpdateAdmin();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.newAdmin))\n            obj.newAdmin = String(object.newAdmin);\n        if ((0, helpers_1.isSet)(object.contract))\n            obj.contract = String(object.contract);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.newAdmin !== undefined && (obj.newAdmin = message.newAdmin);\n        message.contract !== undefined && (obj.contract = message.contract);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgUpdateAdmin();\n        message.sender = object.sender ?? \"\";\n        message.newAdmin = object.newAdmin ?? \"\";\n        message.contract = object.contract ?? \"\";\n        return message;\n    },\n};\nfunction createBaseMsgUpdateAdminResponse() {\n    return {};\n}\nexports.MsgUpdateAdminResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdminResponse\",\n    encode(_, writer = binary_1.BinaryWriter.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateAdminResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const obj = createBaseMsgUpdateAdminResponse();\n        return obj;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgUpdateAdminResponse();\n        return message;\n    },\n};\nfunction createBaseMsgClearAdmin() {\n    return {\n        sender: \"\",\n        contract: \"\",\n    };\n}\nexports.MsgClearAdmin = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgClearAdmin();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgClearAdmin();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.contract))\n            obj.contract = String(object.contract);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgClearAdmin();\n        message.sender = object.sender ?? \"\";\n        message.contract = object.contract ?? \"\";\n        return message;\n    },\n};\nfunction createBaseMsgClearAdminResponse() {\n    return {};\n}\nexports.MsgClearAdminResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdminResponse\",\n    encode(_, writer = binary_1.BinaryWriter.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgClearAdminResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const obj = createBaseMsgClearAdminResponse();\n        return obj;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgClearAdminResponse();\n        return message;\n    },\n};\nfunction createBaseMsgUpdateInstantiateConfig() {\n    return {\n        sender: \"\",\n        codeId: BigInt(0),\n        newInstantiatePermission: undefined,\n    };\n}\nexports.MsgUpdateInstantiateConfig = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(16).uint64(message.codeId);\n        }\n        if (message.newInstantiatePermission !== undefined) {\n            types_1.AccessConfig.encode(message.newInstantiatePermission, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateInstantiateConfig();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.codeId = reader.uint64();\n                    break;\n                case 3:\n                    message.newInstantiatePermission = types_1.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMsgUpdateInstantiateConfig();\n        if ((0, helpers_1.isSet)(object.sender))\n            obj.sender = String(object.sender);\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.newInstantiatePermission))\n            obj.newInstantiatePermission = types_1.AccessConfig.fromJSON(object.newInstantiatePermission);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.newInstantiatePermission !== undefined &&\n            (obj.newInstantiatePermission = message.newInstantiatePermission\n                ? types_1.AccessConfig.toJSON(message.newInstantiatePermission)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMsgUpdateInstantiateConfig();\n        message.sender = object.sender ?? \"\";\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        if (object.newInstantiatePermission !== undefined && object.newInstantiatePermission !== null) {\n            message.newInstantiatePermission = types_1.AccessConfig.fromPartial(object.newInstantiatePermission);\n        }\n        return message;\n    },\n};\nfunction createBaseMsgUpdateInstantiateConfigResponse() {\n    return {};\n}\nexports.MsgUpdateInstantiateConfigResponse = {\n    typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse\",\n    encode(_, writer = binary_1.BinaryWriter.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateInstantiateConfigResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const obj = createBaseMsgUpdateInstantiateConfigResponse();\n        return obj;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgUpdateInstantiateConfigResponse();\n        return message;\n    },\n};\nclass MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.StoreCode = this.StoreCode.bind(this);\n        this.InstantiateContract = this.InstantiateContract.bind(this);\n        this.InstantiateContract2 = this.InstantiateContract2.bind(this);\n        this.ExecuteContract = this.ExecuteContract.bind(this);\n        this.MigrateContract = this.MigrateContract.bind(this);\n        this.UpdateAdmin = this.UpdateAdmin.bind(this);\n        this.ClearAdmin = this.ClearAdmin.bind(this);\n        this.UpdateInstantiateConfig = this.UpdateInstantiateConfig.bind(this);\n    }\n    StoreCode(request) {\n        const data = exports.MsgStoreCode.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"StoreCode\", data);\n        return promise.then((data) => exports.MsgStoreCodeResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    InstantiateContract(request) {\n        const data = exports.MsgInstantiateContract.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"InstantiateContract\", data);\n        return promise.then((data) => exports.MsgInstantiateContractResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    InstantiateContract2(request) {\n        const data = exports.MsgInstantiateContract2.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"InstantiateContract2\", data);\n        return promise.then((data) => exports.MsgInstantiateContract2Response.decode(new binary_1.BinaryReader(data)));\n    }\n    ExecuteContract(request) {\n        const data = exports.MsgExecuteContract.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"ExecuteContract\", data);\n        return promise.then((data) => exports.MsgExecuteContractResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    MigrateContract(request) {\n        const data = exports.MsgMigrateContract.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"MigrateContract\", data);\n        return promise.then((data) => exports.MsgMigrateContractResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    UpdateAdmin(request) {\n        const data = exports.MsgUpdateAdmin.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"UpdateAdmin\", data);\n        return promise.then((data) => exports.MsgUpdateAdminResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    ClearAdmin(request) {\n        const data = exports.MsgClearAdmin.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"ClearAdmin\", data);\n        return promise.then((data) => exports.MsgClearAdminResponse.decode(new binary_1.BinaryReader(data)));\n    }\n    UpdateInstantiateConfig(request) {\n        const data = exports.MsgUpdateInstantiateConfig.encode(request).finish();\n        const promise = this.rpc.request(\"cosmwasm.wasm.v1.Msg\", \"UpdateInstantiateConfig\", data);\n        return promise.then((data) => exports.MsgUpdateInstantiateConfigResponse.decode(new binary_1.BinaryReader(data)));\n    }\n}\nexports.MsgClientImpl = MsgClientImpl;\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cosmjs-types/cosmwasm/wasm/v1/tx.js\n"));

/***/ }),

/***/ "./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js":
/*!*************************************************************!*\
  !*** ./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Model = exports.AbsoluteTxPosition = exports.ContractCodeHistoryEntry = exports.ContractInfo = exports.CodeInfo = exports.Params = exports.AccessConfig = exports.AccessTypeParam = exports.contractCodeHistoryOperationTypeToJSON = exports.contractCodeHistoryOperationTypeFromJSON = exports.ContractCodeHistoryOperationType = exports.accessTypeToJSON = exports.accessTypeFromJSON = exports.AccessType = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"./node_modules/cosmjs-types/google/protobuf/any.js\");\nconst binary_1 = __webpack_require__(/*! ../../../binary */ \"./node_modules/cosmjs-types/binary.js\");\nconst helpers_1 = __webpack_require__(/*! ../../../helpers */ \"./node_modules/cosmjs-types/helpers.js\");\nexports.protobufPackage = \"cosmwasm.wasm.v1\";\n/** AccessType permission types */\nvar AccessType;\n(function (AccessType) {\n    /** ACCESS_TYPE_UNSPECIFIED - AccessTypeUnspecified placeholder for empty value */\n    AccessType[AccessType[\"ACCESS_TYPE_UNSPECIFIED\"] = 0] = \"ACCESS_TYPE_UNSPECIFIED\";\n    /** ACCESS_TYPE_NOBODY - AccessTypeNobody forbidden */\n    AccessType[AccessType[\"ACCESS_TYPE_NOBODY\"] = 1] = \"ACCESS_TYPE_NOBODY\";\n    /**\n     * ACCESS_TYPE_ONLY_ADDRESS - AccessTypeOnlyAddress restricted to a single address\n     * Deprecated: use AccessTypeAnyOfAddresses instead\n     */\n    AccessType[AccessType[\"ACCESS_TYPE_ONLY_ADDRESS\"] = 2] = \"ACCESS_TYPE_ONLY_ADDRESS\";\n    /** ACCESS_TYPE_EVERYBODY - AccessTypeEverybody unrestricted */\n    AccessType[AccessType[\"ACCESS_TYPE_EVERYBODY\"] = 3] = \"ACCESS_TYPE_EVERYBODY\";\n    /** ACCESS_TYPE_ANY_OF_ADDRESSES - AccessTypeAnyOfAddresses allow any of the addresses */\n    AccessType[AccessType[\"ACCESS_TYPE_ANY_OF_ADDRESSES\"] = 4] = \"ACCESS_TYPE_ANY_OF_ADDRESSES\";\n    AccessType[AccessType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AccessType || (exports.AccessType = AccessType = {}));\nfunction accessTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ACCESS_TYPE_UNSPECIFIED\":\n            return AccessType.ACCESS_TYPE_UNSPECIFIED;\n        case 1:\n        case \"ACCESS_TYPE_NOBODY\":\n            return AccessType.ACCESS_TYPE_NOBODY;\n        case 2:\n        case \"ACCESS_TYPE_ONLY_ADDRESS\":\n            return AccessType.ACCESS_TYPE_ONLY_ADDRESS;\n        case 3:\n        case \"ACCESS_TYPE_EVERYBODY\":\n            return AccessType.ACCESS_TYPE_EVERYBODY;\n        case 4:\n        case \"ACCESS_TYPE_ANY_OF_ADDRESSES\":\n            return AccessType.ACCESS_TYPE_ANY_OF_ADDRESSES;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AccessType.UNRECOGNIZED;\n    }\n}\nexports.accessTypeFromJSON = accessTypeFromJSON;\nfunction accessTypeToJSON(object) {\n    switch (object) {\n        case AccessType.ACCESS_TYPE_UNSPECIFIED:\n            return \"ACCESS_TYPE_UNSPECIFIED\";\n        case AccessType.ACCESS_TYPE_NOBODY:\n            return \"ACCESS_TYPE_NOBODY\";\n        case AccessType.ACCESS_TYPE_ONLY_ADDRESS:\n            return \"ACCESS_TYPE_ONLY_ADDRESS\";\n        case AccessType.ACCESS_TYPE_EVERYBODY:\n            return \"ACCESS_TYPE_EVERYBODY\";\n        case AccessType.ACCESS_TYPE_ANY_OF_ADDRESSES:\n            return \"ACCESS_TYPE_ANY_OF_ADDRESSES\";\n        case AccessType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.accessTypeToJSON = accessTypeToJSON;\n/** ContractCodeHistoryOperationType actions that caused a code change */\nvar ContractCodeHistoryOperationType;\n(function (ContractCodeHistoryOperationType) {\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED - ContractCodeHistoryOperationTypeUnspecified placeholder for empty value */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\"] = 0] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT - ContractCodeHistoryOperationTypeInit on chain contract instantiation */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\"] = 1] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE - ContractCodeHistoryOperationTypeMigrate code migration */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\"] = 2] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS - ContractCodeHistoryOperationTypeGenesis based on genesis data */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\"] = 3] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ContractCodeHistoryOperationType || (exports.ContractCodeHistoryOperationType = ContractCodeHistoryOperationType = {}));\nfunction contractCodeHistoryOperationTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED;\n        case 1:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT;\n        case 2:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE;\n        case 3:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ContractCodeHistoryOperationType.UNRECOGNIZED;\n    }\n}\nexports.contractCodeHistoryOperationTypeFromJSON = contractCodeHistoryOperationTypeFromJSON;\nfunction contractCodeHistoryOperationTypeToJSON(object) {\n    switch (object) {\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n        case ContractCodeHistoryOperationType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.contractCodeHistoryOperationTypeToJSON = contractCodeHistoryOperationTypeToJSON;\nfunction createBaseAccessTypeParam() {\n    return {\n        value: 0,\n    };\n}\nexports.AccessTypeParam = {\n    typeUrl: \"/cosmwasm.wasm.v1.AccessTypeParam\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.value !== 0) {\n            writer.uint32(8).int32(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccessTypeParam();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.value = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseAccessTypeParam();\n        if ((0, helpers_1.isSet)(object.value))\n            obj.value = accessTypeFromJSON(object.value);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.value !== undefined && (obj.value = accessTypeToJSON(message.value));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAccessTypeParam();\n        message.value = object.value ?? 0;\n        return message;\n    },\n};\nfunction createBaseAccessConfig() {\n    return {\n        permission: 0,\n        address: \"\",\n        addresses: [],\n    };\n}\nexports.AccessConfig = {\n    typeUrl: \"/cosmwasm.wasm.v1.AccessConfig\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.permission !== 0) {\n            writer.uint32(8).int32(message.permission);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(18).string(message.address);\n        }\n        for (const v of message.addresses) {\n            writer.uint32(26).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccessConfig();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.permission = reader.int32();\n                    break;\n                case 2:\n                    message.address = reader.string();\n                    break;\n                case 3:\n                    message.addresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseAccessConfig();\n        if ((0, helpers_1.isSet)(object.permission))\n            obj.permission = accessTypeFromJSON(object.permission);\n        if ((0, helpers_1.isSet)(object.address))\n            obj.address = String(object.address);\n        if (Array.isArray(object?.addresses))\n            obj.addresses = object.addresses.map((e) => String(e));\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.permission !== undefined && (obj.permission = accessTypeToJSON(message.permission));\n        message.address !== undefined && (obj.address = message.address);\n        if (message.addresses) {\n            obj.addresses = message.addresses.map((e) => e);\n        }\n        else {\n            obj.addresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAccessConfig();\n        message.permission = object.permission ?? 0;\n        message.address = object.address ?? \"\";\n        message.addresses = object.addresses?.map((e) => e) || [];\n        return message;\n    },\n};\nfunction createBaseParams() {\n    return {\n        codeUploadAccess: exports.AccessConfig.fromPartial({}),\n        instantiateDefaultPermission: 0,\n    };\n}\nexports.Params = {\n    typeUrl: \"/cosmwasm.wasm.v1.Params\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeUploadAccess !== undefined) {\n            exports.AccessConfig.encode(message.codeUploadAccess, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.instantiateDefaultPermission !== 0) {\n            writer.uint32(16).int32(message.instantiateDefaultPermission);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeUploadAccess = exports.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.instantiateDefaultPermission = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseParams();\n        if ((0, helpers_1.isSet)(object.codeUploadAccess))\n            obj.codeUploadAccess = exports.AccessConfig.fromJSON(object.codeUploadAccess);\n        if ((0, helpers_1.isSet)(object.instantiateDefaultPermission))\n            obj.instantiateDefaultPermission = accessTypeFromJSON(object.instantiateDefaultPermission);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeUploadAccess !== undefined &&\n            (obj.codeUploadAccess = message.codeUploadAccess\n                ? exports.AccessConfig.toJSON(message.codeUploadAccess)\n                : undefined);\n        message.instantiateDefaultPermission !== undefined &&\n            (obj.instantiateDefaultPermission = accessTypeToJSON(message.instantiateDefaultPermission));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseParams();\n        if (object.codeUploadAccess !== undefined && object.codeUploadAccess !== null) {\n            message.codeUploadAccess = exports.AccessConfig.fromPartial(object.codeUploadAccess);\n        }\n        message.instantiateDefaultPermission = object.instantiateDefaultPermission ?? 0;\n        return message;\n    },\n};\nfunction createBaseCodeInfo() {\n    return {\n        codeHash: new Uint8Array(),\n        creator: \"\",\n        instantiateConfig: exports.AccessConfig.fromPartial({}),\n    };\n}\nexports.CodeInfo = {\n    typeUrl: \"/cosmwasm.wasm.v1.CodeInfo\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeHash.length !== 0) {\n            writer.uint32(10).bytes(message.codeHash);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.instantiateConfig !== undefined) {\n            exports.AccessConfig.encode(message.instantiateConfig, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodeInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeHash = reader.bytes();\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 5:\n                    message.instantiateConfig = exports.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseCodeInfo();\n        if ((0, helpers_1.isSet)(object.codeHash))\n            obj.codeHash = (0, helpers_1.bytesFromBase64)(object.codeHash);\n        if ((0, helpers_1.isSet)(object.creator))\n            obj.creator = String(object.creator);\n        if ((0, helpers_1.isSet)(object.instantiateConfig))\n            obj.instantiateConfig = exports.AccessConfig.fromJSON(object.instantiateConfig);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeHash !== undefined &&\n            (obj.codeHash = (0, helpers_1.base64FromBytes)(message.codeHash !== undefined ? message.codeHash : new Uint8Array()));\n        message.creator !== undefined && (obj.creator = message.creator);\n        message.instantiateConfig !== undefined &&\n            (obj.instantiateConfig = message.instantiateConfig\n                ? exports.AccessConfig.toJSON(message.instantiateConfig)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCodeInfo();\n        message.codeHash = object.codeHash ?? new Uint8Array();\n        message.creator = object.creator ?? \"\";\n        if (object.instantiateConfig !== undefined && object.instantiateConfig !== null) {\n            message.instantiateConfig = exports.AccessConfig.fromPartial(object.instantiateConfig);\n        }\n        return message;\n    },\n};\nfunction createBaseContractInfo() {\n    return {\n        codeId: BigInt(0),\n        creator: \"\",\n        admin: \"\",\n        label: \"\",\n        created: undefined,\n        ibcPortId: \"\",\n        extension: undefined,\n    };\n}\nexports.ContractInfo = {\n    typeUrl: \"/cosmwasm.wasm.v1.ContractInfo\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(26).string(message.admin);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.created !== undefined) {\n            exports.AbsoluteTxPosition.encode(message.created, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.ibcPortId !== \"\") {\n            writer.uint32(50).string(message.ibcPortId);\n        }\n        if (message.extension !== undefined) {\n            any_1.Any.encode(message.extension, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContractInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 3:\n                    message.admin = reader.string();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.created = exports.AbsoluteTxPosition.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.ibcPortId = reader.string();\n                    break;\n                case 7:\n                    message.extension = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseContractInfo();\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.creator))\n            obj.creator = String(object.creator);\n        if ((0, helpers_1.isSet)(object.admin))\n            obj.admin = String(object.admin);\n        if ((0, helpers_1.isSet)(object.label))\n            obj.label = String(object.label);\n        if ((0, helpers_1.isSet)(object.created))\n            obj.created = exports.AbsoluteTxPosition.fromJSON(object.created);\n        if ((0, helpers_1.isSet)(object.ibcPortId))\n            obj.ibcPortId = String(object.ibcPortId);\n        if ((0, helpers_1.isSet)(object.extension))\n            obj.extension = any_1.Any.fromJSON(object.extension);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.creator !== undefined && (obj.creator = message.creator);\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.label !== undefined && (obj.label = message.label);\n        message.created !== undefined &&\n            (obj.created = message.created ? exports.AbsoluteTxPosition.toJSON(message.created) : undefined);\n        message.ibcPortId !== undefined && (obj.ibcPortId = message.ibcPortId);\n        message.extension !== undefined &&\n            (obj.extension = message.extension ? any_1.Any.toJSON(message.extension) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContractInfo();\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        message.creator = object.creator ?? \"\";\n        message.admin = object.admin ?? \"\";\n        message.label = object.label ?? \"\";\n        if (object.created !== undefined && object.created !== null) {\n            message.created = exports.AbsoluteTxPosition.fromPartial(object.created);\n        }\n        message.ibcPortId = object.ibcPortId ?? \"\";\n        if (object.extension !== undefined && object.extension !== null) {\n            message.extension = any_1.Any.fromPartial(object.extension);\n        }\n        return message;\n    },\n};\nfunction createBaseContractCodeHistoryEntry() {\n    return {\n        operation: 0,\n        codeId: BigInt(0),\n        updated: undefined,\n        msg: new Uint8Array(),\n    };\n}\nexports.ContractCodeHistoryEntry = {\n    typeUrl: \"/cosmwasm.wasm.v1.ContractCodeHistoryEntry\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.operation !== 0) {\n            writer.uint32(8).int32(message.operation);\n        }\n        if (message.codeId !== BigInt(0)) {\n            writer.uint32(16).uint64(message.codeId);\n        }\n        if (message.updated !== undefined) {\n            exports.AbsoluteTxPosition.encode(message.updated, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(34).bytes(message.msg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContractCodeHistoryEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.operation = reader.int32();\n                    break;\n                case 2:\n                    message.codeId = reader.uint64();\n                    break;\n                case 3:\n                    message.updated = exports.AbsoluteTxPosition.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.msg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseContractCodeHistoryEntry();\n        if ((0, helpers_1.isSet)(object.operation))\n            obj.operation = contractCodeHistoryOperationTypeFromJSON(object.operation);\n        if ((0, helpers_1.isSet)(object.codeId))\n            obj.codeId = BigInt(object.codeId.toString());\n        if ((0, helpers_1.isSet)(object.updated))\n            obj.updated = exports.AbsoluteTxPosition.fromJSON(object.updated);\n        if ((0, helpers_1.isSet)(object.msg))\n            obj.msg = (0, helpers_1.bytesFromBase64)(object.msg);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.operation !== undefined &&\n            (obj.operation = contractCodeHistoryOperationTypeToJSON(message.operation));\n        message.codeId !== undefined && (obj.codeId = (message.codeId || BigInt(0)).toString());\n        message.updated !== undefined &&\n            (obj.updated = message.updated ? exports.AbsoluteTxPosition.toJSON(message.updated) : undefined);\n        message.msg !== undefined &&\n            (obj.msg = (0, helpers_1.base64FromBytes)(message.msg !== undefined ? message.msg : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContractCodeHistoryEntry();\n        message.operation = object.operation ?? 0;\n        if (object.codeId !== undefined && object.codeId !== null) {\n            message.codeId = BigInt(object.codeId.toString());\n        }\n        if (object.updated !== undefined && object.updated !== null) {\n            message.updated = exports.AbsoluteTxPosition.fromPartial(object.updated);\n        }\n        message.msg = object.msg ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseAbsoluteTxPosition() {\n    return {\n        blockHeight: BigInt(0),\n        txIndex: BigInt(0),\n    };\n}\nexports.AbsoluteTxPosition = {\n    typeUrl: \"/cosmwasm.wasm.v1.AbsoluteTxPosition\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.blockHeight !== BigInt(0)) {\n            writer.uint32(8).uint64(message.blockHeight);\n        }\n        if (message.txIndex !== BigInt(0)) {\n            writer.uint32(16).uint64(message.txIndex);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAbsoluteTxPosition();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockHeight = reader.uint64();\n                    break;\n                case 2:\n                    message.txIndex = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseAbsoluteTxPosition();\n        if ((0, helpers_1.isSet)(object.blockHeight))\n            obj.blockHeight = BigInt(object.blockHeight.toString());\n        if ((0, helpers_1.isSet)(object.txIndex))\n            obj.txIndex = BigInt(object.txIndex.toString());\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockHeight !== undefined && (obj.blockHeight = (message.blockHeight || BigInt(0)).toString());\n        message.txIndex !== undefined && (obj.txIndex = (message.txIndex || BigInt(0)).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAbsoluteTxPosition();\n        if (object.blockHeight !== undefined && object.blockHeight !== null) {\n            message.blockHeight = BigInt(object.blockHeight.toString());\n        }\n        if (object.txIndex !== undefined && object.txIndex !== null) {\n            message.txIndex = BigInt(object.txIndex.toString());\n        }\n        return message;\n    },\n};\nfunction createBaseModel() {\n    return {\n        key: new Uint8Array(),\n        value: new Uint8Array(),\n    };\n}\nexports.Model = {\n    typeUrl: \"/cosmwasm.wasm.v1.Model\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModel();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseModel();\n        if ((0, helpers_1.isSet)(object.key))\n            obj.key = (0, helpers_1.bytesFromBase64)(object.key);\n        if ((0, helpers_1.isSet)(object.value))\n            obj.value = (0, helpers_1.bytesFromBase64)(object.value);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseModel();\n        message.key = object.key ?? new Uint8Array();\n        message.value = object.value ?? new Uint8Array();\n        return message;\n    },\n};\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cosmjs-types/cosmwasm/wasm/v1/types.js\n"));

/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Top level file is just a mixin of submodules & constants\n\n\nconst { Deflate, deflate, deflateRaw, gzip } = __webpack_require__(/*! ./lib/deflate */ \"./node_modules/pako/lib/deflate.js\");\n\nconst { Inflate, inflate, inflateRaw, ungzip } = __webpack_require__(/*! ./lib/inflate */ \"./node_modules/pako/lib/inflate.js\");\n\nconst constants = __webpack_require__(/*! ./lib/zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = ungzip;\nmodule.exports.constants = constants;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLFFBQVEscUNBQXFDLEVBQUUsbUJBQU8sQ0FBQyx5REFBZTs7QUFFdEUsUUFBUSx1Q0FBdUMsRUFBRSxtQkFBTyxDQUFDLHlEQUFlOztBQUV4RSxrQkFBa0IsbUJBQU8sQ0FBQyx1RUFBc0I7O0FBRWhELHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYWtvL2luZGV4LmpzPzViMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVG9wIGxldmVsIGZpbGUgaXMganVzdCBhIG1peGluIG9mIHN1Ym1vZHVsZXMgJiBjb25zdGFudHNcbid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBEZWZsYXRlLCBkZWZsYXRlLCBkZWZsYXRlUmF3LCBnemlwIH0gPSByZXF1aXJlKCcuL2xpYi9kZWZsYXRlJyk7XG5cbmNvbnN0IHsgSW5mbGF0ZSwgaW5mbGF0ZSwgaW5mbGF0ZVJhdywgdW5nemlwIH0gPSByZXF1aXJlKCcuL2xpYi9pbmZsYXRlJyk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vbGliL3psaWIvY29uc3RhbnRzJyk7XG5cbm1vZHVsZS5leHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUmF3ID0gZGVmbGF0ZVJhdztcbm1vZHVsZS5leHBvcnRzLmd6aXAgPSBnemlwO1xubW9kdWxlLmV4cG9ydHMuSW5mbGF0ZSA9IEluZmxhdGU7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3O1xubW9kdWxlLmV4cG9ydHMudW5nemlwID0gdW5nemlwO1xubW9kdWxlLmV4cG9ydHMuY29uc3RhbnRzID0gY29uc3RhbnRzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/index.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n\nconst zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"./node_modules/pako/lib/zlib/deflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/deflate.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n\nconst zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"./node_modules/pako/lib/zlib/inflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nconst GZheader     = __webpack_require__(/*! ./zlib/gzheader */ \"./node_modules/pako/lib/zlib/gzheader.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/inflate.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7QUFHYjtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjs7QUFFbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBOztBQUVBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4Q0FBOEMsT0FBTztBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9jb21tb24uanM/Y2JjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxuY29uc3QgX2hhcyA9IChvYmosIGtleSkgPT4ge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmFzc2lnbiA9IGZ1bmN0aW9uIChvYmogLypmcm9tMSwgZnJvbTIsIGZyb20zLCAuLi4qLykge1xuICBjb25zdCBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgY29uc3Qgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcCBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChfaGFzKHNvdXJjZSwgcCkpIHtcbiAgICAgICAgb2JqW3BdID0gc291cmNlW3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG5cbi8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cbm1vZHVsZS5leHBvcnRzLmZsYXR0ZW5DaHVua3MgPSAoY2h1bmtzKSA9PiB7XG4gIC8vIGNhbGN1bGF0ZSBkYXRhIGxlbmd0aFxuICBsZXQgbGVuID0gMDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgfVxuXG4gIC8vIGpvaW4gY2h1bmtzXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGNodW5rID0gY2h1bmtzW2ldO1xuICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7XG4gICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/utils/common.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// String encode/decode helpers\n\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/utils/strings.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcz8yNTUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogYWRsZXIzMiB0YWtlcyAxMiUgZm9yIGxldmVsIDAgYW5kIDIlIGZvciBsZXZlbCA2LlxuLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuY29uc3QgYWRsZXIzMiA9IChhZGxlciwgYnVmLCBsZW4sIHBvcykgPT4ge1xuICBsZXQgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLFxuICAgICAgbiA9IDA7XG5cbiAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXG4gICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cbiAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XG4gICAgbGVuIC09IG47XG5cbiAgICBkbyB7XG4gICAgICBzMSA9IChzMSArIGJ1Zltwb3MrK10pIHwwO1xuICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIHMxICU9IDY1NTIxO1xuICAgIHMyICU9IDY1NTIxO1xuICB9XG5cbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/adler32.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzP2JmYzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbiAgWl9OT19GTFVTSDogICAgICAgICAwLFxuICBaX1BBUlRJQUxfRkxVU0g6ICAgIDEsXG4gIFpfU1lOQ19GTFVTSDogICAgICAgMixcbiAgWl9GVUxMX0ZMVVNIOiAgICAgICAzLFxuICBaX0ZJTklTSDogICAgICAgICAgIDQsXG4gIFpfQkxPQ0s6ICAgICAgICAgICAgNSxcbiAgWl9UUkVFUzogICAgICAgICAgICA2LFxuXG4gIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gICovXG4gIFpfT0s6ICAgICAgICAgICAgICAgMCxcbiAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxuICBaX05FRURfRElDVDogICAgICAgIDIsXG4gIFpfRVJSTk86ICAgICAgICAgICAtMSxcbiAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxuICBaX0RBVEFfRVJST1I6ICAgICAgLTMsXG4gIFpfTUVNX0VSUk9SOiAgICAgICAtNCxcbiAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxuICAvL1pfVkVSU0lPTl9FUlJPUjogLTYsXG5cbiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG4gIFpfTk9fQ09NUFJFU1NJT046ICAgICAgICAgMCxcbiAgWl9CRVNUX1NQRUVEOiAgICAgICAgICAgICAxLFxuICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogICAtMSxcblxuXG4gIFpfRklMVEVSRUQ6ICAgICAgICAgICAgICAgMSxcbiAgWl9IVUZGTUFOX09OTFk6ICAgICAgICAgICAyLFxuICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXG4gIFpfRklYRUQ6ICAgICAgICAgICAgICAgICAgNCxcbiAgWl9ERUZBVUxUX1NUUkFURUdZOiAgICAgICAwLFxuXG4gIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbiAgWl9CSU5BUlk6ICAgICAgICAgICAgICAgICAwLFxuICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXG4gIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpXG4gIFpfVU5LTk9XTjogICAgICAgICAgICAgICAgMixcblxuICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbiAgWl9ERUZMQVRFRDogICAgICAgICAgICAgICA4XG4gIC8vWl9OVUxMOiAgICAgICAgICAgICAgICAgbnVsbCAvLyBVc2UgLTEgb3IgbnVsbCBpbmxpbmUsIGRlcGVuZGluZyBvbiB2YXIgdHlwZVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/constants.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkI7OztBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NyYzMyLmpzP2NkYzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbi8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcbi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbmNvbnN0IG1ha2VUYWJsZSA9ICgpID0+IHtcbiAgbGV0IGMsIHRhYmxlID0gW107XG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59O1xuXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxuY29uc3QgY3JjVGFibGUgPSBuZXcgVWludDMyQXJyYXkobWFrZVRhYmxlKCkpO1xuXG5cbmNvbnN0IGNyYzMyID0gKGNyYywgYnVmLCBsZW4sIHBvcykgPT4ge1xuICBjb25zdCB0ID0gY3JjVGFibGU7XG4gIGNvbnN0IGVuZCA9IHBvcyArIGxlbjtcblxuICBjcmMgXj0gLTE7XG5cbiAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07XG4gIH1cblxuICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/crc32.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __webpack_require__(/*! ./trees */ \"./node_modules/pako/lib/zlib/trees.js\");\nconst adler32 = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32   = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst msg     = __webpack_require__(/*! ./messages */ \"./node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||\n                        flush === Z_NO_FLUSH ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR;\n  }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\n/* ========================================================================= */\nconst deflate = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/deflate.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2d6aGVhZGVyLmpzPzJjMTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIEdaaGVhZGVyKCkge1xuICAvKiB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0ICovXG4gIHRoaXMudGV4dCAgICAgICA9IDA7XG4gIC8qIG1vZGlmaWNhdGlvbiB0aW1lICovXG4gIHRoaXMudGltZSAgICAgICA9IDA7XG4gIC8qIGV4dHJhIGZsYWdzIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMueGZsYWdzICAgICA9IDA7XG4gIC8qIG9wZXJhdGluZyBzeXN0ZW0gKi9cbiAgdGhpcy5vcyAgICAgICAgID0gMDtcbiAgLyogcG9pbnRlciB0byBleHRyYSBmaWVsZCBvciBaX05VTEwgaWYgbm9uZSAqL1xuICB0aGlzLmV4dHJhICAgICAgPSBudWxsO1xuICAvKiBleHRyYSBmaWVsZCBsZW5ndGggKHZhbGlkIGlmIGV4dHJhICE9IFpfTlVMTCkgKi9cbiAgdGhpcy5leHRyYV9sZW4gID0gMDsgLy8gQWN0dWFsbHksIHdlIGRvbid0IG5lZWQgaXQgaW4gSlMsXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBsZWF2ZSBmb3IgZmV3IGNvZGUgbW9kaWZpY2F0aW9uc1xuXG4gIC8vXG4gIC8vIFNldHVwIGxpbWl0cyBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnlcbiAgLy8gZm9yIGluZmxhdGUgdXNlIGNvbnN0YW50IGxpbWl0IGluIDY1NTM2IGJ5dGVzXG4gIC8vXG5cbiAgLyogc3BhY2UgYXQgZXh0cmEgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5leHRyYV9tYXggID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgZmlsZSBuYW1lIG9yIFpfTlVMTCAqL1xuICB0aGlzLm5hbWUgICAgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLm5hbWVfbWF4ICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBjb21tZW50IG9yIFpfTlVMTCAqL1xuICB0aGlzLmNvbW1lbnQgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgY29tbWVudCAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmNvbW1fbWF4ICAgPSAwO1xuICAvKiB0cnVlIGlmIHRoZXJlIHdhcyBvciB3aWxsIGJlIGEgaGVhZGVyIGNyYyAqL1xuICB0aGlzLmhjcmMgICAgICAgPSAwO1xuICAvKiB0cnVlIHdoZW4gZG9uZSByZWFkaW5nIGd6aXAgaGVhZGVyIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMuZG9uZSAgICAgICA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdaaGVhZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/gzheader.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 16209;       /* got a data error -- remain here until reset */\nconst TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inffast.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nconst inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inflate.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inftrees.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL21lc3NhZ2VzLmpzP2UzNGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi9cbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gIDA6ICAgICAgJycsICAgICAgICAgICAgICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqL1xuICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi9cbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICctMyc6ICAgJ2RhdGEgZXJyb3InLCAgICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqL1xuICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi9cbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICctNic6ICAgJ2luY29tcGF0aWJsZSB2ZXJzaW9uJyAvKiBaX1ZFUlNJT05fRVJST1IgKC02KSAqL1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/messages.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/trees.js\n"));

/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvenN0cmVhbS5qcz80ODliIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xuICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cbiAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X2luID0gMDtcbiAgLyogbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqL1xuICB0aGlzLmF2YWlsX2luID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gIHRoaXMudG90YWxfaW4gPSAwO1xuICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9vdXQgPSAwO1xuICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb3V0cHV0IHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX291dCA9IDA7XG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICB0aGlzLm1zZyA9ICcnLypaX05VTEwqLztcbiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xuICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXG4gIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gIHRoaXMuYWRsZXIgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFpTdHJlYW07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/zstream.js\n"));

/***/ })

}]);